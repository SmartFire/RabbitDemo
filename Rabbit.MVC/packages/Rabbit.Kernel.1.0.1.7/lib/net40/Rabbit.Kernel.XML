<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rabbit.Kernel</name>
    </assembly>
    <members>
        <member name="T:Rabbit.Kernel.Bus.BuilderExtensions">
            <summary>
            总线建设者扩展。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Bus.BuilderExtensions.UseBus(Rabbit.Kernel.IKernelBuilder,System.Action{Rabbit.Kernel.Bus.BuilderExtensions.IBusBuilder})">
            <summary>
            使用总线。
            </summary>
            <param name="kernelBuilder">内核建设者。</param>
            <param name="busBuilder">总线建设动作。</param>
        </member>
        <member name="T:Rabbit.Kernel.Bus.BuilderExtensions.IBusBuilder">
            <summary>
            一个抽象的总线组件建设者。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Bus.BuilderExtensions.IBusBuilder.KernelBuilder">
            <summary>
            内核建设者。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Bus.BuilderExtensions.BusBuilder.KernelBuilder">
            <summary>
            内核建设者。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Bus.Configurators.RequestConfigurator">
            <summary>
            请求配置。
            </summary>
        </member>
        <member name="F:Rabbit.Kernel.Bus.Configurators.RequestConfigurator._bus">
            <summary>
            对应的总线。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Bus.Configurators.RequestConfigurator.#ctor(Rabbit.Kernel.Bus.IBus,Rabbit.Kernel.Bus.MessageBase)">
            <summary>
            初始化一个新的请求配置。
            </summary>
            <param name="bus">总线。</param>
            <param name="message">消息实例。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bus"/> 或 <paramref name="message"/> 为null。</exception>
        </member>
        <member name="M:Rabbit.Kernel.Bus.Configurators.RequestConfigurator.Handle(System.Action{Rabbit.Kernel.Bus.MessageBase,Rabbit.Kernel.Bus.ResponseMessage})">
            <summary>
            为该请求配置一个处理程序。
            </summary>
            <param name="handler">处理程序。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="handler"/> 为 null。</exception>
            <returns>请求配置。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Bus.Configurators.RequestConfigurator.Handle(System.Action{Rabbit.Kernel.Bus.ResponseMessage})">
            <summary>
            为该请求配置一个处理程序。
            </summary>
            <param name="handler">处理程序。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="handler"/> 为 null。</exception>
            <returns>请求配置。</returns>
        </member>
        <member name="T:Rabbit.Kernel.Bus.Configurators.RequestConfiguratorExtensions">
            <summary>
            请求配置扩展。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Bus.Configurators.RequestConfiguratorExtensions.Handle``1(Rabbit.Kernel.Bus.Configurators.RequestConfigurator,System.Action{``0})">
            <summary>
            为该请求配置一个处理程序。
            </summary>
            <typeparam name="TResponse">响应的消息类型。</typeparam>
            <param name="requestConfigurator">请求配置。</param>
            <param name="handler">处理程序。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="requestConfigurator"/> 或 <paramref name="handler"/> 为 null。</exception>
        </member>
        <member name="M:Rabbit.Kernel.Bus.Configurators.RequestConfiguratorExtensions.Handle(Rabbit.Kernel.Bus.Configurators.RequestConfigurator,System.Action)">
            <summary>
            为该请求配置一个处理程序。
            </summary>
            <param name="requestConfigurator">请求配置。</param>
            <param name="handler">处理程序。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="requestConfigurator"/> 或 <paramref name="handler"/> 为 null。</exception>
        </member>
        <member name="T:Rabbit.Kernel.Bus.Configurators.ResponseConfigurator">
            <summary>
            响应配置。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Bus.Configurators.ResponseConfigurator.#ctor(Rabbit.Kernel.Bus.IBus,Rabbit.Kernel.Bus.MessageBase)">
            <summary>
            初始化一个新的响应配置。
            </summary>
            <param name="bus">总线。</param>
            <param name="message">请求消息。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bus"/> 或 <paramref name="message"/> 为 null。</exception>
        </member>
        <member name="M:Rabbit.Kernel.Bus.Configurators.ResponseConfigurator.Post(System.Action{Rabbit.Kernel.Bus.ResponseMessage})">
            <summary>
            提交一个响应给请求消息。
            </summary>
            <param name="configuration">响应消息配置。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="configuration"/> 为null。</exception>
        </member>
        <member name="T:Rabbit.Kernel.Bus.Configurators.ResponseConfiguratorExtensions">
            <summary>
            响应配置扩展。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Bus.Configurators.ResponseConfiguratorExtensions.Post(Rabbit.Kernel.Bus.Configurators.ResponseConfigurator,System.Object)">
            <summary>
            提交一个结果给请求消息。
            </summary>
            <param name="responseConfigurator">响应配置。</param>
            <param name="result">结果。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="responseConfigurator"/> 为null。</exception>
        </member>
        <member name="M:Rabbit.Kernel.Bus.Configurators.ResponseConfiguratorExtensions.Post(Rabbit.Kernel.Bus.Configurators.ResponseConfigurator,System.Object,System.Exception)">
            <summary>
            提交一个结果给请求消息。
            </summary>
            <param name="responseConfigurator">响应配置。</param>
            <param name="result">结果。</param>
            <param name="exception">响应异常。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="responseConfigurator"/> 为null。</exception>
        </member>
        <member name="T:Rabbit.Kernel.Bus.Configurators.TimeoutConfigurator">
            <summary>
            超时配置。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Bus.Configurators.TimeoutConfigurator.#ctor">
            <summary>
            初始化一个新的超时配置。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Bus.Configurators.TimeoutConfigurator.Timeout(System.TimeSpan)">
            <summary>
            设置请求超时的时间。
            </summary>
            <param name="timeSpan">超时时间。</param>
            <returns>请求配置。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Bus.Configurators.TimeoutConfigurator.Handle(System.Func{Rabbit.Kernel.Bus.Exceptions.RequestTimeoutException,System.Boolean})">
            <summary>
            设置超时之后的动作。
            </summary>
            <param name="timeout">超时之后的动作，返回true则不抛出异常，否则抛出异常。</param>
            <returns>请求配置。</returns>
        </member>
        <member name="P:Rabbit.Kernel.Bus.Configurators.TimeoutConfigurator.TimeoutTime">
            <summary>
            超时时间（默认为10秒）。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Bus.Configurators.TimeoutConfigurator.TimeoutAction">
            <summary>
            超时之后的动作，返回true则不抛出异常，否则抛出异常。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Bus.Exceptions.RequestTimeoutException">
            <summary>
            请求超时异常。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Bus.Exceptions.RequestTimeoutException.#ctor(Rabbit.Kernel.Bus.MessageBase)">
            <summary>
            初始化一个新的请求超时异常。
            </summary>
            <param name="message">消息。</param>
        </member>
        <member name="T:Rabbit.Kernel.Bus.IBus">
            <summary>
            表示一个抽象总线。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Bus.IBus.Publish``1(``0)">
            <summary>
            发布一个消息到总线。
            </summary>
            <typeparam name="TMessage">消息类型。</typeparam>
            <param name="message">需要发布的消息。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/> 为null。</exception>
        </member>
        <member name="M:Rabbit.Kernel.Bus.IBus.Subscribe``1(System.Action{``0})">
            <summary>
            订阅一个消息。
            </summary>
            <typeparam name="TMessage">消息类型。</typeparam>
            <param name="messageHandler">消息处理程序。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="messageHandler"/> 为null。</exception>
            <returns>由系统生成的唯一Key。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Bus.IBus.Clear">
            <summary>
            清除等待发布的消息。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Bus.Bus">
            <summary>
            总线基类。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Bus.Bus.#ctor(Rabbit.Kernel.Bus.IMessageDispatcher)">
            <summary>
            初始化一个新的Bug。
            </summary>
            <param name="messageDispatcher">消息调度员。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="messageDispatcher"/> 为 null。</exception>
        </member>
        <member name="M:Rabbit.Kernel.Bus.Bus.Rabbit#Kernel#Bus#IBus#Publish``1(``0)">
            <summary>
            发布一个消息到总线。
            </summary>
            <typeparam name="TMessage">消息类型。</typeparam>
            <param name="message">需要发布的消息。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/> 为null。</exception>
        </member>
        <member name="M:Rabbit.Kernel.Bus.Bus.Rabbit#Kernel#Bus#IBus#Subscribe``1(System.Action{``0})">
            <summary>
            订阅一个消息。
            </summary>
            <typeparam name="TMessage">消息类型。</typeparam>
            <param name="messageHandler">消息处理程序。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="messageHandler"/> 为null。</exception>
            <returns>由系统生成的唯一Key。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Bus.Bus.Rabbit#Kernel#Bus#IBus#Clear">
            <summary>
            清除等待发布的消息。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Bus.Bus.Publish``1(``0)">
            <summary>
            发布一个消息到总线。
            </summary>
            <typeparam name="TMessage">消息类型。</typeparam>
            <param name="message">需要发布的消息。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/> 为null。</exception>
        </member>
        <member name="M:Rabbit.Kernel.Bus.Bus.Subscribe``1(System.Action{``0})">
            <summary>
            订阅一个消息。
            </summary>
            <typeparam name="TMessage">消息类型。</typeparam>
            <param name="messageHandler">消息处理程序。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="messageHandler"/> 为null。</exception>
            <returns>由系统生成的唯一Key。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Bus.Bus.Clear">
            <summary>
            清除等待发布的消息。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Bus.Bus.SetPublishDateTime(System.Object)">
            <summary>
            设置消息发布时间。
            </summary>
            <param name="message">消息实例。</param>
        </member>
        <member name="T:Rabbit.Kernel.Bus.BusExtensions">
            <summary>
            总线扩展。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Bus.BusExtensions.PublishAsync``1(Rabbit.Kernel.Bus.IBus,``0,System.Boolean)">
            <summary>
            发布一个消息集合到总线。
            </summary>
            <typeparam name="TMessage">消息类型。</typeparam>
            <param name="bus">总线。</param>
            <param name="message">需要发布的消息。</param>
            <param name="isStart">是否立即启动任务。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bus"/> 或 <paramref name="message"/> 为null。</exception>
            <returns>一个发布任务。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Bus.BusExtensions.Publishs``1(Rabbit.Kernel.Bus.IBus,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            发布一个消息集合到总线。
            </summary>
            <typeparam name="TMessage">消息类型。</typeparam>
            <param name="bus">总线。</param>
            <param name="messages">需要发布的消息。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bus"/> 或 <paramref name="messages"/> 为null。</exception>
        </member>
        <member name="M:Rabbit.Kernel.Bus.BusExtensions.PublishsAsync``1(Rabbit.Kernel.Bus.IBus,System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            异步发布一个消息集合到总线。
            </summary>
            <typeparam name="TMessage">消息类型。</typeparam>
            <param name="bus">总线。</param>
            <param name="messages">需要发布的消息。</param>
            <param name="isStart">是否立即启动任务。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bus"/> 或 <paramref name="messages"/> 为null。</exception>
            <returns>一个发布任务。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Bus.BusExtensions.PublishRequest``1(Rabbit.Kernel.Bus.IBus,``0,System.Action{Rabbit.Kernel.Bus.Configurators.RequestConfigurator})">
            <summary>
            发布一个请求。
            </summary>
            <typeparam name="TMessage">消息类型。</typeparam>
            <param name="bus">总线。</param>
            <param name="message">消息。</param>
            <param name="configurator">请求配置。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bus"/> 或 <paramref name="message"/> 或 <paramref name="configurator"/> 为null。</exception>
            <exception cref="T:Rabbit.Kernel.Bus.Exceptions.RequestTimeoutException">请求超时。</exception>
            <returns>是否成功。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Bus.BusExtensions.PublishRequest``1(Rabbit.Kernel.Bus.IBus,``0)">
            <summary>
            发布一个请求，如果请求在10秒之内没有任何回应则中断该请求。
            </summary>
            <typeparam name="TMessage">消息类型。</typeparam>
            <param name="bus">总线。</param>
            <param name="message">消息。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bus"/> 或 <paramref name="message"/> 为null。</exception>
            <exception cref="T:Rabbit.Kernel.Bus.Exceptions.RequestTimeoutException">请求超时。</exception>
            <returns>是否成功。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Bus.BusExtensions.PublishRequest``1(Rabbit.Kernel.Bus.IBus,``0,System.Action{Rabbit.Kernel.Bus.Configurators.TimeoutConfigurator})">
            <summary>
            发布一个请求。
            </summary>
            <typeparam name="TMessage">消息类型。</typeparam>
            <param name="bus">总线。</param>
            <param name="message">消息。</param>
            <param name="configurator">请求超时相关的配置动作。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bus"/> 或 <paramref name="message"/> 为null。</exception>
            <exception cref="T:Rabbit.Kernel.Bus.Exceptions.RequestTimeoutException">请求超时。</exception>
            <returns>是否成功。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Bus.BusExtensions.PublishRequest``2(Rabbit.Kernel.Bus.IBus,``0)">
            <summary>
            发布一个请求，如果请求在10秒之内没有任何回应则中断该请求。
            </summary>
            <typeparam name="TMessage">消息类型。</typeparam>
            <typeparam name="TResult">返回结果的类型。</typeparam>
            <param name="bus">总线。</param>
            <param name="message">消息。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bus"/> 或 <paramref name="message"/> 为null。</exception>
            <exception cref="T:Rabbit.Kernel.Bus.Exceptions.RequestTimeoutException">请求超时。</exception>
            <returns>是否成功。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Bus.BusExtensions.PublishRequest``2(Rabbit.Kernel.Bus.IBus,``0,System.Action{Rabbit.Kernel.Bus.Configurators.TimeoutConfigurator})">
            <summary>
            发布一个请求。
            </summary>
            <typeparam name="TMessage">消息类型。</typeparam>
            <typeparam name="TResult">返回结果的类型。</typeparam>
            <param name="bus">总线。</param>
            <param name="message">消息。</param>
            <param name="configurator">请求超时相关的配置动作。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bus"/> 或 <paramref name="message"/> 为null。</exception>
            <exception cref="T:Rabbit.Kernel.Bus.Exceptions.RequestTimeoutException">请求超时。</exception>
            <returns>是否成功。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Bus.BusExtensions.Subscribe``2(Rabbit.Kernel.Bus.IBus,System.Func{``0,``1})">
            <summary>
            订阅一个消息。
            </summary>
            <typeparam name="TMessage">消息类型。</typeparam>
            <typeparam name="TResult">结果类型。</typeparam>
            <param name="bus">总线。</param>
            <param name="handler">处理程序。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bus"/> 或 <paramref name="handler"/> 或 <paramref name="handler"/> 为null。</exception>
        </member>
        <member name="M:Rabbit.Kernel.Bus.BusExtensions.Subscribe``1(Rabbit.Kernel.Bus.IBus,System.Action{``0,Rabbit.Kernel.Bus.Configurators.ResponseConfigurator})">
            <summary>
            订阅一个消息。
            </summary>
            <typeparam name="TMessage">消息类型。</typeparam>
            <param name="bus">总线。</param>
            <param name="handler">处理程序。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bus"/> 或 <paramref name="handler"/> 或 <paramref name="handler"/> 为null。</exception>
        </member>
        <member name="T:Rabbit.Kernel.Bus.ILocalBus">
            <summary>
            一个抽象的本地总线，该总线所传递的消息只在当前应用程序中有效。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.ISingletonDependency">
            <summary>
            表示实现者是一个单列依赖。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.IDependency">
            <summary>
            表示实现者是一个基础依赖。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Bus.IMessageDispatcher">
            <summary>
            消息调度员。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Bus.IMessageDispatcher.DispatchMessage(System.Object)">
            <summary>
            调度消息。
            </summary>
            <param name="message">需要被调度的消息。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/> 为null。</exception>
            <exception cref="T:System.AggregateException">处理过程中一个或多个处理程序发生了异常。</exception>
        </member>
        <member name="M:Rabbit.Kernel.Bus.IMessageDispatcher.Register``1(System.Action{``0})">
            <summary>
            注册消息处理到消息调度。
            </summary>
            <typeparam name="TMessage">消息类型。</typeparam>
            <param name="messageHandler">需要注册的处理程序。</param>
            <returns>由系统生成的唯一Key。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="messageHandler"/> 为null。</exception>
        </member>
        <member name="M:Rabbit.Kernel.Bus.IMessageDispatcher.UnRegister``1(System.String)">
            <summary>
            从消息调度取消一个已注册的消息处理。
            </summary>
            <typeparam name="TMessage">消息类型。</typeparam>
            <param name="key">唯一Key。</param>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> 为空。</exception>
        </member>
        <member name="M:Rabbit.Kernel.Bus.IMessageDispatcher.Clear(System.Boolean)">
            <summary>
            清除已登记注册的消息处理程序。
            </summary>
            <param name="isClearWaitDispatch">是否清除等待的调度处理程序。</param>
        </member>
        <member name="M:Rabbit.Kernel.Bus.IMessageDispatcher.ClearWaitDispatch">
            <summary>
            清除等待的调度。
            </summary>
        </member>
        <member name="E:Rabbit.Kernel.Bus.IMessageDispatcher.Dispatching">
            <summary>
            消息调度时触发的事件。
            </summary>
        </member>
        <member name="E:Rabbit.Kernel.Bus.IMessageDispatcher.DispatchFailed">
            <summary>
            消息调度失败时触发事件。
            </summary>
        </member>
        <member name="E:Rabbit.Kernel.Bus.IMessageDispatcher.Dispatched">
            <summary>
            完成消息调度触发的事件（就算调度失败也会执行）。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Bus.Impl.DefaultMessageDispatcher.DispatchMessage(System.Object)">
            <summary>
            调度消息。
            </summary>
            <param name="message">需要被调度的消息。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/> 为null。</exception>
            <exception cref="T:System.AggregateException">处理过程中一个或多个处理程序发生了异常。</exception>
        </member>
        <member name="M:Rabbit.Kernel.Bus.Impl.DefaultMessageDispatcher.Register``1(System.Action{``0})">
            <summary>
            注册消息处理到消息调度。
            </summary>
            <typeparam name="TMessage">消息类型。</typeparam>
            <param name="messageHandler">需要注册的处理程序。</param>
            <returns>由系统生成的唯一Key。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="messageHandler"/> 为null。</exception>
        </member>
        <member name="M:Rabbit.Kernel.Bus.Impl.DefaultMessageDispatcher.UnRegister``1(System.String)">
            <summary>
            从消息调度取消一个已注册的消息处理。
            </summary>
            <typeparam name="TMessage">消息类型。</typeparam>
            <param name="key">唯一Key。</param>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> 为空。</exception>
        </member>
        <member name="M:Rabbit.Kernel.Bus.Impl.DefaultMessageDispatcher.Clear(System.Boolean)">
            <summary>
            清除已登记注册的消息处理程序。
            </summary>
            <param name="isClearWaitDispatch">是否清除等待的调度处理程序。</param>
        </member>
        <member name="M:Rabbit.Kernel.Bus.Impl.DefaultMessageDispatcher.ClearWaitDispatch">
            <summary>
            清除等待的调度。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Bus.MessageDispatchEventArgs">
             <summary>
            表示调度消息时所产生的事件数据。
             </summary>
        </member>
        <member name="M:Rabbit.Kernel.Bus.MessageDispatchEventArgs.#ctor(System.Object)">
            <summary>
            初始化一个新的消息调度事件数据。
            </summary>
            <param name="message">消息。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/> 为 null。</exception>
        </member>
        <member name="P:Rabbit.Kernel.Bus.MessageDispatchEventArgs.Message">
            <summary>
            消息。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Bus.MessageDispatchFailEventArgs">
            <summary>
            消息调度失败时候所产生的事件数据。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Bus.MessageDispatchFailEventArgs.#ctor(System.Object,System.Exception)">
            <summary>
            初始化一个新的消息调度失败事件数据。
            </summary>
            <param name="message">消息。</param>
            <param name="exception">异常。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/> 或 <paramref name="exception"/> 为 null。</exception>
        </member>
        <member name="P:Rabbit.Kernel.Bus.MessageDispatchFailEventArgs.Exception">
            <summary>
            发生的异常。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Bus.MessageBase">
            <summary>
            消息基类。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Bus.MessageBase.#ctor">
            <summary>
            初始化一个新的消息。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Bus.MessageBase.ToString">
            <summary>
            返回表示当前 <see cref="T:System.Object"/> 的 <see cref="T:System.String"/>。
            </summary>
            <returns>
            <see cref="T:System.String"/>，表示当前的 <see cref="T:System.Object"/>。
            </returns>
        </member>
        <member name="P:Rabbit.Kernel.Bus.MessageBase.Id">
            <summary>
            消息的唯一标识。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Bus.MessageBase.PublishDateTimeUtc">
            <summary>
            发布的Utc时间。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Bus.ResponseMessage">
            <summary>
            一个响应消息。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Bus.ResponseMessage.#ctor(System.String)">
            <summary>
            初始化一个新的响应消息。
            </summary>
            <param name="requestMessageId">请求消息的Id。</param>
        </member>
        <member name="M:Rabbit.Kernel.Bus.ResponseMessage.#ctor(System.String,System.Object)">
            <summary>
            初始化一个新的响应消息。
            </summary>
            <param name="responseMessageId">响应消息Id。</param>
            <param name="result">请求结果。</param>
        </member>
        <member name="M:Rabbit.Kernel.Bus.ResponseMessage.ToString">
            <summary>
            返回表示当前 <see cref="T:System.Object"/> 的 <see cref="T:System.String"/>。
            </summary>
            <returns>
            <see cref="T:System.String"/>，表示当前的 <see cref="T:System.Object"/>。
            </returns>
        </member>
        <member name="P:Rabbit.Kernel.Bus.ResponseMessage.Result">
            <summary>
            响应结果。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Bus.ResponseMessage.RequestMessageId">
            <summary>
            请求消息的Id。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Bus.ResponseMessage.Exception">
            <summary>
            响应时发生的异常，没有发生异常则为null。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Bus.MethodMessage">
            <summary>
            方法消息。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Bus.MethodMessage.#ctor(System.String)">
            <summary>
            初始化一个新的方法消息。
            </summary>
            <param name="key">键。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> 为空。</exception>
        </member>
        <member name="M:Rabbit.Kernel.Bus.MethodMessage.ToString">
            <summary>
            返回表示当前 <see cref="T:System.Object"/> 的 <see cref="T:System.String"/>。
            </summary>
            <returns>
            <see cref="T:System.String"/>，表示当前的 <see cref="T:System.Object"/>。
            </returns>
        </member>
        <member name="P:Rabbit.Kernel.Bus.MethodMessage.Key">
            <summary>
            消息键。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Bus.MethodMessage.Parameters">
            <summary>
            方法参数。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Bus.CommandMessage">
            <summary>
            命令消息。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Bus.CommandMessage.#ctor(System.String)">
            <summary>
            初始化一个新的命令消息。
            </summary>
            <param name="commandName">命令名称。</param>
        </member>
        <member name="M:Rabbit.Kernel.Bus.CommandMessage.#ctor(System.String,System.Object[])">
            <summary>
            初始化一个新的命令消息。
            </summary>
            <param name="commandName">命令名称。</param>
            <param name="parameters">命令参数。</param>
        </member>
        <member name="M:Rabbit.Kernel.Bus.CommandMessage.ToString">
            <summary>
            返回表示当前 <see cref="T:System.Object"/> 的 <see cref="T:System.String"/>。
            </summary>
            <returns>
            <see cref="T:System.String"/>，表示当前的 <see cref="T:System.Object"/>。
            </returns>
        </member>
        <member name="P:Rabbit.Kernel.Bus.CommandMessage.CommandName">
            <summary>
            命令名称。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Bus.CommandMessage.Parameters">
            <summary>
            参数。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Caching.IAcquireContext">
            <summary>
            一个抽象的获取上下文。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Caching.IAcquireContext.Monitor">
            <summary>
            监控动作。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Caching.AcquireContext`1">
            <summary>
            默认的获取上下文。
            </summary>
            <typeparam name="TKey">键类型。</typeparam>
        </member>
        <member name="M:Rabbit.Kernel.Caching.AcquireContext`1.#ctor(`0,System.Action{Rabbit.Kernel.Caching.IVolatileToken})">
            <summary>
            初始化一个默认的获取上下文。
            </summary>
            <param name="key">键。</param>
            <param name="monitor">监控动作。</param>
        </member>
        <member name="P:Rabbit.Kernel.Caching.AcquireContext`1.Key">
            <summary>
            键。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Caching.AcquireContext`1.Monitor">
            <summary>
            监控动作。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Caching.SimpleAcquireContext">
            <summary>
            一个简单的获取上下文。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Caching.SimpleAcquireContext.#ctor(System.Action{Rabbit.Kernel.Caching.IVolatileToken})">
            <summary>
            初始化一个简单的获取上下文。
            </summary>
            <param name="monitor">监控动作。</param>
        </member>
        <member name="P:Rabbit.Kernel.Caching.SimpleAcquireContext.Monitor">
            <summary>
            监控动作。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Caching.BuilderExtensions">
            <summary>
            缓存建设者扩展。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Caching.BuilderExtensions.UseCaching(Rabbit.Kernel.IKernelBuilder,System.Action{Rabbit.Kernel.Caching.BuilderExtensions.ICachingBuilder})">
            <summary>
            使用缓存。
            </summary>
            <param name="kernelBuilder">内核建设者。</param>
            <param name="cachingBuilder">缓存建设动作。</param>
        </member>
        <member name="T:Rabbit.Kernel.Caching.BuilderExtensions.ICachingBuilder">
            <summary>
            一个抽象的缓存组件建设者。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Caching.BuilderExtensions.ICachingBuilder.KernelBuilder">
            <summary>
            内核建设者。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Caching.BuilderExtensions.CachingBuilder.KernelBuilder">
            <summary>
            内核建设者。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Caching.CacheModule.Load(Autofac.ContainerBuilder)">
            <summary>
            Override to add registrations to the container.
            </summary>
            <remarks>
            Note that the ContainerBuilder parameter is unique to this module.
            </remarks>
            <param name="builder">The builder through which components can be
                        registered.</param>
        </member>
        <member name="M:Rabbit.Kernel.Caching.CacheModule.AttachToComponentRegistration(Autofac.Core.IComponentRegistry,Autofac.Core.IComponentRegistration)">
            <summary>
            Override to attach module-specific functionality to a
                        component registration.
            </summary>
            <remarks>
            This method will be called for all existing <i>and future</i> component
                        registrations - ordering is not important.
            </remarks>
            <param name="componentRegistry">The component registry.</param><param name="registration">The registration to attach functionality to.</param>
        </member>
        <member name="T:Rabbit.Kernel.Caching.IAsyncTokenProvider">
            <summary>
            一个抽象的异步象征提供程序。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Caching.IAsyncTokenProvider.GetToken(System.Action{System.Action{Rabbit.Kernel.Caching.IVolatileToken}})">
            <summary>
            获取象征。
            </summary>
            <param name="task">任务。</param>
            <returns>挥发象征。</returns>
        </member>
        <member name="T:Rabbit.Kernel.Caching.ICache`2">
            <summary>
            一个抽象的缓存。
            </summary>
            <typeparam name="TKey">键类型。</typeparam>
            <typeparam name="TResult">值类型。</typeparam>
        </member>
        <member name="M:Rabbit.Kernel.Caching.ICache`2.Get(`0,System.Func{Rabbit.Kernel.Caching.AcquireContext{`0},`1})">
            <summary>
            根据键获取一个缓存结果。
            </summary>
            <param name="key">键。</param>
            <param name="acquire">获取上下文。</param>
            <returns>缓存结果。</returns>
        </member>
        <member name="T:Rabbit.Kernel.Caching.ICacheContextAccessor">
            <summary>
            一个抽象的缓存上下文访问器。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Caching.ICacheContextAccessor.Current">
            <summary>
            当前获取上下文。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Caching.ICacheHolder">
            <summary>
            一个抽象的缓存持有者。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Caching.ICacheHolder.GetCache``2(System.Type)">
            <summary>
            获取缓存。
            </summary>
            <typeparam name="TKey">键类型。</typeparam>
            <typeparam name="TResult">结果类型。</typeparam>
            <param name="component">组件类型。</param>
            <returns>缓存实例。</returns>
        </member>
        <member name="T:Rabbit.Kernel.Caching.ICacheManager">
            <summary>
            一个抽象的缓存管理者。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Caching.ICacheManager.GetCache``2">
            <summary>
            获取一个缓存实例。
            </summary>
            <typeparam name="TKey">键类型。</typeparam>
            <typeparam name="TResult">结果类型。</typeparam>
            <returns>缓存实例。</returns>
        </member>
        <member name="T:Rabbit.Kernel.Caching.CacheManagerExtensions">
            <summary>
            缓存管理者扩展方法。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Caching.CacheManagerExtensions.Get``2(Rabbit.Kernel.Caching.ICacheManager,``0,System.Func{Rabbit.Kernel.Caching.AcquireContext{``0},``1})">
            <summary>
            根据 <paramref name="key"/> 获取一个缓存值。
            </summary>
            <typeparam name="TKey">键类型。</typeparam>
            <typeparam name="TResult">结果类型。</typeparam>
            <param name="cacheManager">缓存管理者。</param>
            <param name="key">缓存键。</param>
            <param name="acquire">获取缓存的动作。</param>
            <returns>缓存结果。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Caching.Impl.DefaultAsyncTokenProvider.GetToken(System.Action{System.Action{Rabbit.Kernel.Caching.IVolatileToken}})">
            <summary>
            获取象征。
            </summary>
            <param name="task">任务。</param>
            <returns>挥发象征。</returns>
        </member>
        <member name="T:Rabbit.Kernel.Caching.IVolatileToken">
            <summary>
            一个抽象的挥发令牌。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Caching.IVolatileToken.IsCurrent">
            <summary>
            标识缓存是否有效，true为有效，false为失效。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Caching.Impl.DefaultCacheContextAccessor.Current">
            <summary>
            当前获取上下文。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Caching.Impl.DefaultCacheManager.GetCache``2">
            <summary>
            获取一个缓存实例。
            </summary>
            <typeparam name="TKey">键类型。</typeparam>
            <typeparam name="TResult">结果类型。</typeparam>
            <returns>缓存实例。</returns>
        </member>
        <member name="T:Rabbit.Kernel.Caching.IParallelCacheContext">
            <summary>
            一个抽象的并行缓存上下文。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Caching.IParallelCacheContext.CreateContextAwareTask``1(System.Func{``0})">
            <summary>
            创建一个执行上下文。
            </summary>
            <typeparam name="T">结果类型。</typeparam>
            <param name="function">获取结果的动作。</param>
            <returns>任务实例。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Caching.IParallelCacheContext.RunInParallel``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            以并行的方式运行。
            </summary>
            <typeparam name="T">源元素类型。</typeparam>
            <typeparam name="TResult">结果类型。</typeparam>
            <param name="source">源集合。</param>
            <param name="selector">选择器。</param>
            <returns>结果集合。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Caching.Impl.DefaultParallelCacheContext.CreateContextAwareTask``1(System.Func{``0})">
            <summary>
            创建一个执行上下文。
            </summary>
            <typeparam name="T">结果类型。</typeparam>
            <param name="function">获取结果的动作。</param>
            <returns>任务实例。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Caching.Impl.DefaultParallelCacheContext.RunInParallel``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            以并行的方式运行。
            </summary>
            <typeparam name="T">源元素类型。</typeparam>
            <typeparam name="TResult">结果类型。</typeparam>
            <param name="source">源集合。</param>
            <param name="selector">选择器。</param>
            <returns>结果集合。</returns>
        </member>
        <member name="T:Rabbit.Kernel.Caching.ITask`1">
            <summary>
            一个抽象的任务接口。
            </summary>
            <typeparam name="T">任务的返回类型。</typeparam>
        </member>
        <member name="M:Rabbit.Kernel.Caching.ITask`1.Execute">
            <summary>
            执行任务。
            </summary>
            <returns>任务结果。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Caching.ITask`1.Finish">
            <summary>
            完成任务。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Caching.ITask`1.Tokens">
            <summary>
            执行任务过程中收集到的令牌。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Caching.Impl.DefaultParallelCacheContext.TaskWithAcquireContext`1.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Caching.Impl.DefaultParallelCacheContext.TaskWithAcquireContext`1.Execute">
            <summary>
            执行任务。
            </summary>
            <returns>任务结果。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Caching.Impl.DefaultParallelCacheContext.TaskWithAcquireContext`1.Finish">
            <summary>
            完成任务。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Caching.Impl.DefaultParallelCacheContext.TaskWithAcquireContext`1.Tokens">
            <summary>
            执行任务过程中收集到的令牌。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Caching.Impl.Cache`2.Get(`0,System.Func{Rabbit.Kernel.Caching.AcquireContext{`0},`1})">
            <summary>
            根据键获取一个缓存结果。
            </summary>
            <param name="key">键。</param>
            <param name="acquire">获取上下文。</param>
            <returns>缓存结果。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Caching.Impl.DefaultCacheHolder.GetCache``2(System.Type)">
            <summary>
            获取缓存。
            </summary>
            <typeparam name="TKey">键类型。</typeparam>
            <typeparam name="TResult">结果类型。</typeparam>
            <param name="component">组件类型。</param>
            <returns>缓存实例。</returns>
        </member>
        <member name="T:Rabbit.Kernel.Caching.Impl.MemoryCachingBuilderExtensions">
            <summary>
            缓存建设者扩展方法。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Caching.Impl.MemoryCachingBuilderExtensions.UseMemoryCache(Rabbit.Kernel.Caching.BuilderExtensions.ICachingBuilder)">
            <summary>
            使用内存缓存。
            </summary>
            <param name="cachingBuilder">缓存建设者。</param>
        </member>
        <member name="T:Rabbit.Kernel.Caching.ISignals">
            <summary>
            一个抽象的信号量挥发提供程序。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Caching.IVolatileProvider">
            <summary>
            一个抽象的挥发提供程序。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Caching.ISignals.Trigger``1(``0)">
            <summary>
            触发信号。
            </summary>
            <typeparam name="T">信号类型。</typeparam>
            <param name="signal">信号值。</param>
        </member>
        <member name="M:Rabbit.Kernel.Caching.ISignals.When``1(``0)">
            <summary>
            根据 <paramref name="signal"/> 获取挥发令牌。
            </summary>
            <typeparam name="T">信号类型。</typeparam>
            <param name="signal">信号值。</param>
            <returns>挥发令牌。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Caching.Impl.Signals.Trigger``1(``0)">
            <summary>
            触发信号。
            </summary>
            <typeparam name="T">信号类型。</typeparam>
            <param name="signal">信号值。</param>
        </member>
        <member name="M:Rabbit.Kernel.Caching.Impl.Signals.When``1(``0)">
            <summary>
            根据 <paramref name="signal"/> 获取挥发令牌。
            </summary>
            <typeparam name="T">信号类型。</typeparam>
            <param name="signal">信号值。</param>
            <returns>挥发令牌。</returns>
        </member>
        <member name="T:Rabbit.Kernel.Caching.Impl.Signals.Token">
            <summary>
            令牌。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Caching.Weak`1">
            <summary>
            弱引用类型持有者。
            </summary>
            <typeparam name="T">类型。</typeparam>
        </member>
        <member name="M:Rabbit.Kernel.Caching.Weak`1.#ctor(`0)">
            <summary>
            初始化一个弱引用类型持有者。
            </summary>
            <param name="target">对象引用的对象（目标）。</param>
        </member>
        <member name="M:Rabbit.Kernel.Caching.Weak`1.#ctor(`0,System.Boolean)">
            <summary>
            初始化一个弱引用类型持有者。
            </summary>
            <param name="target">对象引用的对象（目标）。</param>
            <param name="trackResurrection">指示何时停止跟踪对象。 如果为 true，则在终结后跟踪对象；如果为 false，则仅在终结前跟踪对象。</param>
        </member>
        <member name="P:Rabbit.Kernel.Caching.Weak`1.Target">
            <summary>
            获取或设置对象引用的对象（目标）。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.CollectionOrderModule.Configure(Autofac.Core.IComponentRegistry)">
            <summary>
            Apply the module to the component registry.
            </summary>
            <param name="componentRegistry">Component registry to apply configuration to.</param>
        </member>
        <member name="T:Rabbit.Kernel.Environment.Assemblies.IAssemblyLoader">
            <summary>
            一个抽象的程序集装载机。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Assemblies.IAssemblyLoader.Load(System.String)">
            <summary>
            根据程序集名称装载程序集。
            </summary>
            <param name="name">程序集名称。</param>
            <returns>程序集。</returns>
        </member>
        <member name="T:Rabbit.Kernel.Environment.Assemblies.AssemblyLoaderExtensions">
            <summary>
            程序集装载机扩展方法。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Assemblies.AssemblyLoaderExtensions.Load(Rabbit.Kernel.Environment.Assemblies.IAssemblyLoader,Rabbit.Kernel.Environment.Assemblies.Models.AssemblyDescriptor)">
            <summary>
            根据程序集描述符装载一个程序集。
            </summary>
            <param name="assemblyLoader">程序集装载机。</param>
            <param name="descriptor">程序集描述符。</param>
            <returns>程序集。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="descriptor"/> 为null。</exception>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Assemblies.AssemblyLoaderExtensions.ExtractAssemblyShortName(System.String)">
            <summary>
            提取程序集短名称。
            </summary>
            <param name="fullName">程序集完全名称。</param>
            <returns>程序集短名称。</returns>
        </member>
        <member name="T:Rabbit.Kernel.Environment.Assemblies.IAssemblyNameResolver">
            <summary>
            一个抽象的程序集名称解析器。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Assemblies.IAssemblyNameResolver.Resolve(System.String)">
            <summary>
            解析一个程序集短名称到一个完全名称。
            </summary>
            <param name="shortName">程序集短名称。</param>
            <returns>程序集完全名称。</returns>
        </member>
        <member name="P:Rabbit.Kernel.Environment.Assemblies.IAssemblyNameResolver.Order">
            <summary>
            排序。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Assemblies.Impl.AppDomainAssemblyNameResolver.Resolve(System.String)">
            <summary>
            解析一个程序集短名称到一个完全名称。
            </summary>
            <param name="shortName">程序集短名称。</param>
            <returns>程序集完全名称。</returns>
        </member>
        <member name="P:Rabbit.Kernel.Environment.Assemblies.Impl.AppDomainAssemblyNameResolver.Order">
            <summary>
            排序。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Assemblies.Impl.DefaultAssemblyLoader.Load(System.String)">
            <summary>
            根据程序集名称装载程序集。
            </summary>
            <param name="name">程序集名称。</param>
            <returns>程序集。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Assemblies.Impl.FrameworkAssemblyNameResolver.Resolve(System.String)">
            <summary>
            解析一个程序集短名称到一个完全名称。
            </summary>
            <param name="shortName">程序集短名称。</param>
            <returns>程序集完全名称。</returns>
        </member>
        <member name="P:Rabbit.Kernel.Environment.Assemblies.Impl.FrameworkAssemblyNameResolver.Order">
            <summary>
            排序。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Assemblies.Impl.GacAssemblyNameResolver.Resolve(System.String)">
            <summary>
            解析一个程序集短名称到一个完全名称。
            </summary>
            <param name="shortName">程序集短名称。</param>
            <returns>程序集完全名称。</returns>
        </member>
        <member name="P:Rabbit.Kernel.Environment.Assemblies.Impl.GacAssemblyNameResolver.Order">
            <summary>
            排序。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Environment.Assemblies.Models.AssemblyDescriptor">
            <summary>
            程序集描述符。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Assemblies.Models.AssemblyDescriptor.#ctor">
            <summary>
            初始化一个新的程序集描述符实例。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Assemblies.Models.AssemblyDescriptor.#ctor(System.String)">
            <summary>
            根据程序集名称初始化一个新的程序集描述符实例。
            </summary>
            <param name="assemblyName">程序集名称。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="assemblyName"/> 为空。</exception>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Assemblies.Models.AssemblyDescriptor.#ctor(System.Reflection.Assembly)">
            <summary>
            初始化一个新的程序集描述符实例。
            </summary>
            <param name="assembly">程序集。</param>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Assemblies.Models.AssemblyDescriptor.ToString">
            <summary>
            返回表示当前 <see cref="T:System.Object"/> 的 <see cref="T:System.String"/>。
            </summary>
            <returns>
            <see cref="T:System.String"/>，表示当前的 <see cref="T:System.Object"/>。
            </returns>
        </member>
        <member name="P:Rabbit.Kernel.Environment.Assemblies.Models.AssemblyDescriptor.Name">
            <summary>
            程序集名称。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Environment.Assemblies.Models.AssemblyDescriptor.Version">
            <summary>
            程序集版本。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Environment.Assemblies.Models.AssemblyDescriptor.PublicKeyToken">
            <summary>
            公钥象征。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Environment.Assemblies.Models.AssemblyDescriptor.CultureName">
            <summary>
            文化名称。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Environment.Assemblies.Models.AssemblyDescriptor.FullName">
            <summary>
            程序集完全限定名。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Environment.Configuration.IShellSettingsManager">
            <summary>
            一个抽象的外壳设置管理者。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Configuration.IShellSettingsManager.LoadSettings">
            <summary>
            加载所有外壳设置。
            </summary>
            <returns>外壳设置集合。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Configuration.IShellSettingsManager.SaveSettings(Rabbit.Kernel.Environment.Configuration.ShellSettings)">
            <summary>
            保存一个外壳设置。
            </summary>
            <param name="settings">外壳设置信息。</param>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Configuration.IShellSettingsManager.DeleteSettings(System.String)">
            <summary>
            删除一个外壳设置。
            </summary>
            <param name="name">外壳名称。</param>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Configuration.Impl.DefaultShellSettingsManager.Rabbit#Kernel#Environment#Configuration#IShellSettingsManager#LoadSettings">
            <summary>
            加载所有外壳设置。
            </summary>
            <returns>外壳设置集合。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Configuration.Impl.DefaultShellSettingsManager.Rabbit#Kernel#Environment#Configuration#IShellSettingsManager#SaveSettings(Rabbit.Kernel.Environment.Configuration.ShellSettings)">
            <summary>
            保存一个外壳设置。
            </summary>
            <param name="settings">外壳设置信息。</param>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Configuration.Impl.DefaultShellSettingsManager.Rabbit#Kernel#Environment#Configuration#IShellSettingsManager#DeleteSettings(System.String)">
            <summary>
            删除一个外壳设置。
            </summary>
            <param name="name">外壳名称。</param>
        </member>
        <member name="P:Rabbit.Kernel.Environment.Configuration.Impl.DefaultShellSettingsManager.SimpleToken.IsCurrent">
            <summary>
            标识缓存是否有效，true为有效，false为失效。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Environment.Configuration.IShellSettingsManagerEventHandler">
            <summary>
            一个抽象的外壳设置管理者事件处理程序。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Events.IEventHandler">
            <summary>
            一个抽象的事件处理程序。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Configuration.IShellSettingsManagerEventHandler.Saved(Rabbit.Kernel.Environment.Configuration.ShellSettings)">
            <summary>
            外壳设置保存成功之后。
            </summary>
            <param name="settings">外壳设置信息。</param>
        </member>
        <member name="T:Rabbit.Kernel.Environment.Configuration.ShellSettings">
            <summary>
            外壳设置。
            </summary>
        </member>
        <member name="F:Rabbit.Kernel.Environment.Configuration.ShellSettings.DefaultName">
            <summary>
            默认租户名称。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Configuration.ShellSettings.#ctor">
            <summary>
            初始化一个新的外壳设置。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Configuration.ShellSettings.#ctor(Rabbit.Kernel.Environment.Configuration.ShellSettings)">
            <summary>
            初始化一个新的外壳设置。
            </summary>
            <param name="settings">外壳设置。</param>
        </member>
        <member name="P:Rabbit.Kernel.Environment.Configuration.ShellSettings.Item(System.String)">
            <summary>
            外壳设置信息索引器。
            </summary>
            <param name="key">键。</param>
            <returns>值。</returns>
        </member>
        <member name="P:Rabbit.Kernel.Environment.Configuration.ShellSettings.Keys">
            <summary>
            所有设置信息键。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Environment.Configuration.ShellSettings.Name">
            <summary>
            名称。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Environment.Configuration.ShellSettings.State">
            <summary>
            状态。
            </summary>
        </member>
        <member name="F:Rabbit.Kernel.Environment.Configuration.Impl.ShellSettingsSerializer.Separator">
            <summary>
            分隔符。
            </summary>
        </member>
        <member name="F:Rabbit.Kernel.Environment.Configuration.Impl.ShellSettingsSerializer.EmptyValue">
            <summary>
            空值。
            </summary>
        </member>
        <member name="F:Rabbit.Kernel.Environment.Configuration.Impl.ShellSettingsSerializer.AppendSeparator">
            <summary>
            追加时的分隔符（性能优化）。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Configuration.Impl.ShellSettingsSerializer.ParseSettings(System.String)">
            <summary>
            将文本解析成外壳设置。
            </summary>
            <param name="text">文本。</param>
            <returns>外壳设置信息。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="text"/> 为空或者全为字符串。</exception>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Configuration.Impl.ShellSettingsSerializer.ComposeSettings(Rabbit.Kernel.Environment.Configuration.ShellSettings)">
            <summary>
            将外壳设置信息组成文本。
            </summary>
            <param name="settings">外壳设置信息。</param>
            <returns>文本。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="settings"/> 为null。</exception>
        </member>
        <member name="T:Rabbit.Kernel.Environment.Configuration.TenantState">
            <summary>
            租户状态。
            </summary>
        </member>
        <member name="F:Rabbit.Kernel.Environment.Configuration.TenantState.Uninitialized">
            <summary>
            未初始化。
            </summary>
        </member>
        <member name="F:Rabbit.Kernel.Environment.Configuration.TenantState.Running">
            <summary>
            正在运行。
            </summary>
        </member>
        <member name="F:Rabbit.Kernel.Environment.Configuration.TenantState.Disabled">
            <summary>
            关闭。
            </summary>
        </member>
        <member name="F:Rabbit.Kernel.Environment.Configuration.TenantState.Invalid">
            <summary>
            无效。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.HostComponentsConfigModule.AttachToComponentRegistration(Autofac.Core.IComponentRegistry,Autofac.Core.IComponentRegistration)">
            <summary>
            Override to attach module-specific functionality to a
                        component registration.
            </summary>
            <remarks>
            This method will be called for all existing <i>and future</i> component
                        registrations - ordering is not important.
            </remarks>
            <param name="componentRegistry">The component registry.</param><param name="registration">The registration to attach functionality to.</param>
        </member>
        <member name="T:Rabbit.Kernel.Environment.IShell">
            <summary>
            一个抽象的外壳接口。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.IShell.Activate">
            <summary>
            激活外壳。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.IShell.Terminate">
            <summary>
            终止外壳。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Impl.DefaultShell.Activate">
            <summary>
            激活外壳。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Impl.DefaultShell.Terminate">
            <summary>
            终止外壳。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Environment.Descriptor.IShellDescriptorCache">
            <summary>
            一个抽象的外壳描述符缓存。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Descriptor.IShellDescriptorCache.Fetch(System.String)">
            <summary>
            从缓存中抓取外壳描述符。
            </summary>
            <param name="shellName">外壳名称。</param>
            <returns>外壳描述符。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Descriptor.IShellDescriptorCache.Store(System.String,Rabbit.Kernel.Environment.Descriptor.Models.ShellDescriptor)">
            <summary>
            将一个外壳描述符存储到缓存中。
            </summary>
            <param name="shellName">外壳名称。</param>
            <param name="descriptor">外壳描述符。</param>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Descriptor.Impl.DefaultShellDescriptorCache.Fetch(System.String)">
            <summary>
            从缓存中抓取外壳描述符。
            </summary>
            <param name="shellName">外壳名称。</param>
            <returns>外壳描述符。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Descriptor.Impl.DefaultShellDescriptorCache.Store(System.String,Rabbit.Kernel.Environment.Descriptor.Models.ShellDescriptor)">
            <summary>
            将一个外壳描述符存储到缓存中。
            </summary>
            <param name="shellName">外壳名称。</param>
            <param name="descriptor">外壳描述符。</param>
        </member>
        <member name="T:Rabbit.Kernel.Environment.Descriptor.IShellDescriptorManager">
            <summary>
            一个抽象的外壳描述符管理者。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Descriptor.IShellDescriptorManager.GetShellDescriptor">
            <summary>
            获取当前外壳描述符。
            </summary>
            <returns>外壳描述符。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Descriptor.IShellDescriptorManager.UpdateShellDescriptor(System.Int32,System.Collections.Generic.IEnumerable{Rabbit.Kernel.Environment.Descriptor.Models.ShellFeature})">
            <summary>
            更新外壳描述符。
            </summary>
            <param name="serialNumber">序列号。</param>
            <param name="enabledFeatures">需要开启的特性。</param>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Descriptor.Impl.DefaultShellDescriptorManager.GetShellDescriptor">
            <summary>
            获取当前外壳描述符。
            </summary>
            <returns>外壳描述符。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Descriptor.Impl.DefaultShellDescriptorManager.UpdateShellDescriptor(System.Int32,System.Collections.Generic.IEnumerable{Rabbit.Kernel.Environment.Descriptor.Models.ShellFeature})">
            <summary>
            更新外壳描述符。
            </summary>
            <param name="serialNumber">序列号。</param>
            <param name="enabledFeatures">需要开启的特性。</param>
        </member>
        <member name="T:Rabbit.Kernel.Environment.Descriptor.Impl.ShellDescriptorEntry">
            <summary>
            外壳描述符条目。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Descriptor.Impl.ShellDescriptorEntry.op_Explicit(Rabbit.Kernel.Environment.Descriptor.Impl.ShellDescriptorEntry)~Rabbit.Kernel.Environment.Descriptor.Models.ShellDescriptor">
            <summary>
            将外壳描述符条目转换成外壳描述符。
            </summary>
            <param name="entry">外壳描述符条目。</param>
            <returns>外壳描述符。</returns>
        </member>
        <member name="P:Rabbit.Kernel.Environment.Descriptor.Impl.ShellDescriptorEntry.SerialNumber">
            <summary>
            序列号。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Environment.Descriptor.Impl.ShellDescriptorEntry.ShellName">
            <summary>
            外壳名称。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Environment.Descriptor.Impl.ShellDescriptorEntry.Features">
            <summary>
            特性集合。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Environment.Descriptor.IShellDescriptorManagerEventHandler">
            <summary>
            一个抽象的外壳描述符管理者事件处理程序。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Descriptor.IShellDescriptorManagerEventHandler.Changed(Rabbit.Kernel.Environment.Descriptor.Models.ShellDescriptor,System.String)">
            <summary>
            当外壳描述符发生变更时执行。
            </summary>
            <param name="descriptor">新的外壳描述符。</param>
            <param name="tenant">租户名称。</param>
        </member>
        <member name="T:Rabbit.Kernel.Environment.Descriptor.Models.ShellDescriptor">
            <summary>
            外壳描述符。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Descriptor.Models.ShellDescriptor.#ctor">
            <summary>
            初始化一个新的外壳描述符。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Environment.Descriptor.Models.ShellDescriptor.SerialNumber">
            <summary>
            序列号。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Environment.Descriptor.Models.ShellDescriptor.Features">
            <summary>
            特性集合。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Environment.Descriptor.Models.ShellFeature">
            <summary>
            外壳特性。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Environment.Descriptor.Models.ShellFeature.Name">
            <summary>
            特性名称。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Environment.HostContainerRegistry">
            <summary>
            主机容器注册处。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.HostContainerRegistry.RegisterShim(Rabbit.Kernel.Environment.IShim)">
            <summary>
            注册垫片。
            </summary>
            <param name="shim">垫片实例。</param>
        </member>
        <member name="M:Rabbit.Kernel.Environment.HostContainerRegistry.RegisterHostContainer(Rabbit.Kernel.Environment.IHostContainer)">
            <summary>
            注册主机容器。
            </summary>
            <param name="container">主机容器。</param>
        </member>
        <member name="T:Rabbit.Kernel.Environment.IBuildManager">
            <summary>
            一个抽象的生成管理者。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.IBuildManager.GetReferencedAssemblies">
            <summary>
            获取当前所有引用的程序集。
            </summary>
            <returns>程序集集合。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Environment.IBuildManager.HasReferencedAssembly(System.String)">
            <summary>
            是否引用了名称为 <paramref name="name"/> 的程序集。
            </summary>
            <param name="name">程序集名称。</param>
            <returns>引用了为true，否则为false。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Environment.IBuildManager.GetReferencedAssembly(System.String)">
            <summary>
            获取引用程序集。
            </summary>
            <param name="name">程序集名称。</param>
            <returns>程序集。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Environment.IBuildManager.GetCompiledAssembly(System.String)">
            <summary>
            获取编译程序集。
            </summary>
            <param name="virtualPath">虚拟路径。</param>
            <returns>程序集。</returns>
        </member>
        <member name="T:Rabbit.Kernel.Environment.IHost">
            <summary>
            一个抽象的主机。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.IHost.Initialize">
            <summary>
            初始化。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.IHost.ReloadExtensions">
            <summary>
            重新加载扩展。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.IHost.GetShellContext(Rabbit.Kernel.Environment.Configuration.ShellSettings)">
            <summary>
            获取一个外壳上下文。
            </summary>
            <param name="shellSettings">外壳设置。</param>
            <returns>外壳上下文。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Environment.IHost.CreateStandaloneEnvironment(Rabbit.Kernel.Environment.Configuration.ShellSettings)">
            <summary>
            创建一个独立的环境。
            </summary>
            <param name="shellSettings">外壳设置。</param>
            <returns>工作上下文范围。</returns>
        </member>
        <member name="T:Rabbit.Kernel.Environment.IHostContainer">
            <summary>
            一个抽象的主机容器。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.IHostContainer.Resolve``1">
            <summary>
            解析服务。
            </summary>
            <typeparam name="T">服务类型。</typeparam>
            <returns>服务实例。</returns>
        </member>
        <member name="T:Rabbit.Kernel.Environment.IHostEnvironment">
            <summary>
            一个抽象的主机运行环境。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.IHostEnvironment.MapPath(System.String)">
            <summary>
            根据虚拟路径获取物理路径。
            </summary>
            <param name="virtualPath">虚拟路径。</param>
            <returns>物理路径。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Environment.IHostEnvironment.IsAssemblyLoaded(System.String)">
            <summary>
            根据程序集名称判断程序集是否已经被加载。
            </summary>
            <param name="assemblyName">程序集名称。</param>
            <returns>如果已经被加载则返回true，否则返回false。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Environment.IHostEnvironment.RestartAppDomain">
            <summary>
            重新启动AppDmain。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Environment.IHostEnvironment.IsFullTrust">
            <summary>
            是否以完全信任模式运行。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Environment.IHostLocalRestart">
            <summary>
            一个抽象的本地主机重启器。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.IHostLocalRestart.Monitor(System.Action{Rabbit.Kernel.Caching.IVolatileToken})">
            <summary>
            监控动作。
            </summary>
            <param name="monitor">监控动作。</param>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Impl.BuildManagerBase.GetReferencedAssemblies">
            <summary>
            获取当前所有引用的程序集。
            </summary>
            <returns>程序集集合。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Impl.BuildManagerBase.HasReferencedAssembly(System.String)">
            <summary>
            是否引用了名称为 <paramref name="name"/> 的程序集。
            </summary>
            <param name="name">程序集名称。</param>
            <returns>引用了为true，否则为false。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Impl.BuildManagerBase.GetReferencedAssembly(System.String)">
            <summary>
            获取引用程序集。
            </summary>
            <param name="name">程序集名称。</param>
            <returns>程序集。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Impl.BuildManagerBase.GetCompiledAssembly(System.String)">
            <summary>
            获取编译程序集。
            </summary>
            <param name="virtualPath">虚拟路径。</param>
            <returns>程序集。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Impl.DefaultBuildManager.GetReferencedAssemblies">
            <summary>
            获取当前所有引用的程序集。
            </summary>
            <returns>程序集集合。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Impl.DefaultBuildManager.HasReferencedAssembly(System.String)">
            <summary>
            是否引用了名称为 <paramref name="name"/> 的程序集。
            </summary>
            <param name="name">程序集名称。</param>
            <returns>引用了为true，否则为false。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Impl.DefaultBuildManager.GetCompiledAssembly(System.String)">
            <summary>
            获取编译程序集。
            </summary>
            <param name="virtualPath">虚拟路径。</param>
            <returns>程序集。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Impl.WebBuildManager.GetReferencedAssemblies">
            <summary>
            获取当前所有引用的程序集。
            </summary>
            <returns>程序集集合。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Impl.WebBuildManager.HasReferencedAssembly(System.String)">
            <summary>
            是否引用了名称为 <paramref name="name"/> 的程序集。
            </summary>
            <param name="name">程序集名称。</param>
            <returns>引用了为true，否则为false。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Impl.WebBuildManager.GetCompiledAssembly(System.String)">
            <summary>
            获取编译程序集。
            </summary>
            <param name="virtualPath">虚拟路径。</param>
            <returns>程序集。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Impl.DefaultHost.Rabbit#Kernel#Environment#IHost#Initialize">
            <summary>
            初始化。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Impl.DefaultHost.Rabbit#Kernel#Environment#IHost#ReloadExtensions">
            <summary>
            重新加载扩展。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Impl.DefaultHost.GetShellContext(Rabbit.Kernel.Environment.Configuration.ShellSettings)">
            <summary>
            获取一个外壳上下文。
            </summary>
            <param name="shellSettings">外壳设置。</param>
            <returns>外壳上下文。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Impl.DefaultHost.Rabbit#Kernel#Environment#IHost#CreateStandaloneEnvironment(Rabbit.Kernel.Environment.Configuration.ShellSettings)">
            <summary>
            创建一个独立的环境。
            </summary>
            <param name="shellSettings">外壳设置。</param>
            <returns>工作上下文范围。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Impl.DefaultHost.Rabbit#Kernel#Environment#Configuration#IShellSettingsManagerEventHandler#Saved(Rabbit.Kernel.Environment.Configuration.ShellSettings)">
            <summary>
            外壳设置保存成功之后。
            </summary>
            <param name="settings">外壳设置信息。</param>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Impl.DefaultHost.Rabbit#Kernel#Environment#Descriptor#IShellDescriptorManagerEventHandler#Changed(Rabbit.Kernel.Environment.Descriptor.Models.ShellDescriptor,System.String)">
            <summary>
            当外壳描述符发生变更时执行。
            </summary>
            <param name="descriptor">新的外壳描述符。</param>
            <param name="tenant">租户名称。</param>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Impl.DefaultHostContainer.Resolve``1">
            <summary>
            解析服务。
            </summary>
            <typeparam name="T">服务类型。</typeparam>
            <returns>服务实例。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Impl.HostEnvironment.MapPath(System.String)">
            <summary>
            根据虚拟路径获取物理路径。
            </summary>
            <param name="virtualPath">虚拟路径。</param>
            <returns>物理路径。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Impl.HostEnvironment.IsAssemblyLoaded(System.String)">
            <summary>
            根据程序集名称判断程序集是否已经被加载。
            </summary>
            <param name="assemblyName">程序集名称。</param>
            <returns>如果已经被加载则返回true，否则返回false。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Impl.HostEnvironment.RestartAppDomain">
            <summary>
            重新启动AppDmain。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Environment.Impl.HostEnvironment.IsFullTrust">
            <summary>
            是否以完全信任模式运行。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Impl.DefaultHostEnvironment.MapPath(System.String)">
            <summary>
            根据虚拟路径获取物理路径。
            </summary>
            <param name="virtualPath">虚拟路径。</param>
            <returns>物理路径。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Impl.DefaultHostEnvironment.RestartAppDomain">
            <summary>
            重新启动AppDmain。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Impl.DefaultHostLocalRestart.Monitor(System.Action{Rabbit.Kernel.Caching.IVolatileToken})">
            <summary>
            监控动作。
            </summary>
            <param name="monitor">监控动作。</param>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Impl.WebHostEnvironment.MapPath(System.String)">
            <summary>
            根据虚拟路径获取物理路径。
            </summary>
            <param name="virtualPath">虚拟路径。</param>
            <returns>物理路径。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Environment.Impl.WebHostEnvironment.RestartAppDomain">
            <summary>
            重新启动AppDmain。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Environment.IShellEvents">
            <summary>
            一个抽象的外壳事件。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.IShellEvents.Activated">
            <summary>
            激活外壳完成后执行。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.IShellEvents.Terminating">
            <summary>
            终止外壳前候执行。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Environment.IShim">
            <summary>
            一个抽象的垫片。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Environment.IShim.HostContainer">
            <summary>
            主机容器。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Environment.ShellBuilders.ICompositionStrategy">
            <summary>
            一个抽象的组合策略。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.ShellBuilders.ICompositionStrategy.Compose(Rabbit.Kernel.Environment.Configuration.ShellSettings,Rabbit.Kernel.Environment.Descriptor.Models.ShellDescriptor)">
            <summary>
            组合外壳蓝图。
            </summary>
            <param name="settings">外壳设置。</param>
            <param name="descriptor">外壳描述符。</param>
            <returns>外壳蓝图。</returns>
        </member>
        <member name="T:Rabbit.Kernel.Environment.ShellBuilders.CompositionStrategyApplyContext">
            <summary>
            组合策略应用上下文。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.ShellBuilders.CompositionStrategyApplyContext.BuildBlueprint``1(System.Func{System.Type,System.Boolean},System.Func{System.Type,Rabbit.Kernel.Extensions.Models.Feature,``0})">
            <summary>
            建造蓝图。
            </summary>
            <param name="predicate">筛选器。</param>
            <param name="selector">选择器。</param>
            <returns>项集合。</returns>
        </member>
        <member name="P:Rabbit.Kernel.Environment.ShellBuilders.CompositionStrategyApplyContext.Features">
            <summary>
            特性集合。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Environment.ShellBuilders.CompositionStrategyApplyContext.ExcludedTypes">
            <summary>
            排除的类型。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Environment.ShellBuilders.CompositionStrategyApplyContext.ShellBlueprint">
            <summary>
            外壳蓝图。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Environment.ShellBuilders.ICompositionStrategyProvider">
            <summary>
            一个抽象的组合策略提供者。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.ShellBuilders.ICompositionStrategyProvider.Apply(Rabbit.Kernel.Environment.ShellBuilders.CompositionStrategyApplyContext)">
            <summary>
            应用。
            </summary>
            <param name="context">组合策略应用上下文。</param>
        </member>
        <member name="T:Rabbit.Kernel.Environment.ShellBuilders.IMinimumShellDescriptorProvider">
            <summary>
            一个抽象的最新外壳描述符提供者。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.ShellBuilders.IMinimumShellDescriptorProvider.GetFeatures(System.Collections.Generic.ICollection{Rabbit.Kernel.Environment.Descriptor.Models.ShellFeature})">
            <summary>
            获取外壳描述符。
            </summary>
            <param name="features">外壳特性描述符。</param>
        </member>
        <member name="M:Rabbit.Kernel.Environment.ShellBuilders.Impl.KernelMinimumShellDescriptorProvider.GetFeatures(System.Collections.Generic.ICollection{Rabbit.Kernel.Environment.Descriptor.Models.ShellFeature})">
            <summary>
            获取外壳描述符。
            </summary>
            <param name="features">外壳特性描述符。</param>
        </member>
        <member name="M:Rabbit.Kernel.Environment.ShellBuilders.Impl.DefaultCompositionStrategy.Compose(Rabbit.Kernel.Environment.Configuration.ShellSettings,Rabbit.Kernel.Environment.Descriptor.Models.ShellDescriptor)">
            <summary>
            组合外壳蓝图。
            </summary>
            <param name="settings">外壳设置。</param>
            <param name="descriptor">外壳描述符。</param>
            <returns>外壳蓝图。</returns>
        </member>
        <member name="T:Rabbit.Kernel.Environment.ShellBuilders.IServiceTypeHarvester">
            <summary>
            一个抽象的服务类型收集者。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.ShellBuilders.IServiceTypeHarvester.GeTypes(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            获取可用的服务类型。
            </summary>
            <param name="types">类型集合。</param>
            <returns>可用的服务类型。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Environment.ShellBuilders.Impl.DefaultServiceTypeHarvester.GeTypes(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            获取可用的服务类型。
            </summary>
            <param name="types">类型集合。</param>
            <returns>可用的服务类型。</returns>
        </member>
        <member name="T:Rabbit.Kernel.Environment.ShellBuilders.IShellContainerFactory">
            <summary>
            一个抽象的外壳容器工厂。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.ShellBuilders.IShellContainerFactory.CreateContainer(Rabbit.Kernel.Environment.Configuration.ShellSettings,Rabbit.Kernel.Environment.ShellBuilders.Models.ShellBlueprint)">
            <summary>
            创建一个外壳容器。
            </summary>
            <param name="settings">外壳设置。</param>
            <param name="blueprint">外壳蓝图。</param>
            <returns>外壳容器。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Environment.ShellBuilders.Impl.DefaultShellContainerFactory.CreateContainer(Rabbit.Kernel.Environment.Configuration.ShellSettings,Rabbit.Kernel.Environment.ShellBuilders.Models.ShellBlueprint)">
            <summary>
            创建一个外壳容器。
            </summary>
            <param name="settings">外壳设置。</param>
            <param name="blueprint">外壳蓝图。</param>
            <returns>外壳容器。</returns>
        </member>
        <member name="T:Rabbit.Kernel.Environment.ShellBuilders.IShellContextFactory">
            <summary>
            一个抽象的外壳上下文工厂。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.ShellBuilders.IShellContextFactory.CreateShellContext(Rabbit.Kernel.Environment.Configuration.ShellSettings)">
            <summary>
            创建一个外壳上下文工厂。
            </summary>
            <param name="settings">外壳设置。</param>
            <returns>外壳上下文。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Environment.ShellBuilders.Impl.DefaultShellContextFactory.CreateShellContext(Rabbit.Kernel.Environment.Configuration.ShellSettings)">
            <summary>
            创建一个外壳上下文工厂。
            </summary>
            <param name="settings">外壳设置。</param>
            <returns>外壳上下文。</returns>
        </member>
        <member name="T:Rabbit.Kernel.Environment.ShellBuilders.IShellContainerRegistrations">
            <summary>
            一个抽象的外壳容器注册提供程序。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.ShellBuilders.IShellContainerRegistrations.Registrations(Autofac.ContainerBuilder,Rabbit.Kernel.Environment.ShellBuilders.Models.ShellBlueprint)">
            <summary>
            注册动作。
            </summary>
            <param name="builder">容器建造者。</param>
            <param name="blueprint">外壳蓝图。</param>
        </member>
        <member name="T:Rabbit.Kernel.Environment.ShellBuilders.ServiceTypeHarvesterExtensions">
            <summary>
            服务类型收集者扩展方法。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Environment.ShellBuilders.ServiceTypeHarvesterExtensions.GetTypes(Rabbit.Kernel.Environment.ShellBuilders.IServiceTypeHarvester,System.Reflection.Assembly)">
            <summary>
            从程序集中获取可用的服务类型。
            </summary>
            <param name="serviceTypeHarvester">服务类型收集者。</param>
            <param name="assembly">程序集。</param>
            <returns>可用的服务类型。</returns>
        </member>
        <member name="T:Rabbit.Kernel.Environment.ShellBuilders.Models.BlueprintItem">
            <summary>
            蓝图项。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Environment.ShellBuilders.Models.BlueprintItem.Type">
            <summary>
            类型。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Environment.ShellBuilders.Models.BlueprintItem.Feature">
            <summary>
            特性条目。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Environment.ShellBuilders.Models.DependencyBlueprintItem">
            <summary>
            依赖项蓝图。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Environment.ShellBuilders.Models.ShellBlueprint">
            <summary>
            外壳蓝图。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Environment.ShellBuilders.Models.ShellBlueprint.Settings">
            <summary>
            外壳设置。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Environment.ShellBuilders.Models.ShellBlueprint.Descriptor">
            <summary>
            外壳描述符。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Environment.ShellBuilders.Models.ShellBlueprint.Dependencies">
            <summary>
            依赖项集合。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Environment.ShellBuilders.Models.ShellBlueprint.Item(System.String)">
            <summary>
            外壳蓝图索引器。
            </summary>
            <param name="key">键。</param>
            <returns>值。</returns>
        </member>
        <member name="P:Rabbit.Kernel.Environment.ShellBuilders.Models.ShellBlueprint.Keys">
            <summary>
            所有外壳蓝图键。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Environment.ShellBuilders.ShellContext">
            <summary>
            外壳上下文。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Environment.ShellBuilders.ShellContext.Settings">
            <summary>
            外壳设置。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Environment.ShellBuilders.ShellContext.Descriptor">
            <summary>
            外壳描述符。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Environment.ShellBuilders.ShellContext.Blueprint">
            <summary>
            外壳蓝图。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Environment.ShellBuilders.ShellContext.Container">
            <summary>
            外壳容器。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Environment.ShellBuilders.ShellContext.Shell">
            <summary>
            外壳。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Environment.State.ContextState`1">
            <summary>
            保存一些状态在HttpContxt中或线程中。
            </summary>
            <typeparam name="T">需要存储的数据类型。</typeparam>
        </member>
        <member name="M:Rabbit.Kernel.Environment.State.ContextState`1.#ctor(System.String)">
            <summary>
            初始化一个新的上下文状态实例。
            </summary>
            <param name="name">上下文名称。</param>
        </member>
        <member name="M:Rabbit.Kernel.Environment.State.ContextState`1.#ctor(System.String,System.Func{`0})">
            <summary>
            初始化一个新的上下文状态实例。
            </summary>
            <param name="name">上下文名称。</param>
            <param name="defaultValue">默认值。</param>
        </member>
        <member name="M:Rabbit.Kernel.Environment.State.ContextState`1.GetState">
            <summary>
            获取一个状态数据。
            </summary>
            <returns>数据。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Environment.State.ContextState`1.SetState(`0)">
            <summary>
            设置一个状态值。
            </summary>
            <param name="state">状态值。</param>
        </member>
        <member name="T:Rabbit.Kernel.Exceptions.ExceptionExtensions">
            <summary>
            异常扩展方法。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Exceptions.ExceptionExtensions.IsFatal(System.Exception)">
            <summary>
            是否是一个致命的异常。
            </summary>
            <param name="exception">异常信息。</param>
            <returns>如果是致命异常则返回true，否则返回false。</returns>
        </member>
        <member name="T:Rabbit.Kernel.Extensions.ExtensionEntry">
            <summary>
            扩展条目。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.ExtensionEntry.Descriptor">
            <summary>
            扩展描述符。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.ExtensionEntry.Assembly">
            <summary>
            扩展程序集。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.ExtensionEntry.ExportedTypes">
            <summary>
            扩展导出类型集合。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Extensions.ExtensionLoadingContext">
            <summary>
            扩展装载上下文。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.ExtensionLoadingContext.#ctor">
            <summary>
            初始化一个新的扩展装载上下文实例。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.ExtensionLoadingContext.ProcessedExtensions">
            <summary>
            正在运行的扩展。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.ExtensionLoadingContext.ProcessedReferences">
            <summary>
            正在运行的引用。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.ExtensionLoadingContext.NewDependencies">
            <summary>
            新的依赖信息集合。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.ExtensionLoadingContext.DeleteActions">
            <summary>
            删除动作。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.ExtensionLoadingContext.CopyActions">
            <summary>
            复制动作。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.ExtensionLoadingContext.RestartAppDomain">
            <summary>
            是否需要重新启动AppDomain。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.ExtensionLoadingContext.VirtualPathModficationDates">
            <summary>
            跟踪文件的修改日期 (VirtualPath => DateTime)
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.ExtensionLoadingContext.AvailableExtensions">
            <summary>
            在系统中正在运行的扩展。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.ExtensionLoadingContext.PreviousDependencies">
            <summary>
            之前成功运行的扩展。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.ExtensionLoadingContext.DeletedDependencies">
            <summary>
            需要删除的扩展。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.ExtensionLoadingContext.AvailableExtensionsProbes">
            <summary>
            可用的扩展装载机。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.ExtensionLoadingContext.ReferencesByModule">
            <summary>
            按模块分组的引用信息。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.ExtensionLoadingContext.ReferencesByName">
            <summary>
            按引用名称分组的引用信息。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Extensions.FeatureAttribute">
            <summary>
            特性标记。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.FeatureAttribute.#ctor(System.String)">
            <summary>
            初始化一个新的特性标记。
            </summary>
            <param name="featureName">特性名称。</param>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.FeatureAttribute.FeatureName">
            <summary>
            特性名称。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Extensions.Folders.IExtensionFolders">
            <summary>
            一个抽象的扩展文件夹。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Folders.IExtensionFolders.AvailableExtensions">
            <summary>
            可用的扩展。
            </summary>
            <returns>扩展描述条目符集合。</returns>
        </member>
        <member name="T:Rabbit.Kernel.Extensions.Folders.IExtensionHarvester">
            <summary>
            一个抽象的扩展收集者。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Folders.IExtensionHarvester.HarvestExtensions(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Boolean)">
            <summary>
            收集扩展。
            </summary>
            <param name="paths">需要进行收集的路径。</param>
            <param name="extensionType">扩展类型。</param>
            <param name="manifestName">清单文件名称。</param>
            <param name="manifestIsOptional">清单文件是否是可选的。</param>
            <returns>扩展描述符集合。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Folders.Impl.DefaultExtensionHarvester.HarvestExtensions(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Boolean)">
            <summary>
            收集扩展。
            </summary>
            <param name="paths">需要进行收集的路径。</param>
            <param name="extensionType">扩展类型。</param>
            <param name="manifestName">清单文件名称。</param>
            <param name="manifestIsOptional">清单文件是否是可选的。</param>
            <returns>扩展描述符集合。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Folders.Impl.ModuleFolders.AvailableExtensions">
            <summary>
            可用的扩展。
            </summary>
            <returns>扩展描述符条目集合。</returns>
        </member>
        <member name="T:Rabbit.Kernel.Extensions.ExtensionDescriptorEntryFilterContext">
            <summary>
            扩展描述符条目过滤器上下文。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.ExtensionDescriptorEntryFilterContext.#ctor(Rabbit.Kernel.Extensions.Models.ExtensionDescriptorEntry)">
            <summary>
            初始化一个新的扩展描述符条目过滤器上下文。
            </summary>
            <param name="entry">扩展描述符条目。</param>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.ExtensionDescriptorEntryFilterContext.Entry">
            <summary>
            扩展描述符条目。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.ExtensionDescriptorEntryFilterContext.Valid">
            <summary>
            是否可用。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Extensions.IExtensionDescriptorFilter">
            <summary>
            一个抽象的扩展描述符过滤器。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.IExtensionDescriptorFilter.OnDiscovery(Rabbit.Kernel.Extensions.ExtensionDescriptorEntryFilterContext)">
            <summary>
            在发现扩展时执行。
            </summary>
            <param name="context">扩展描述符条目过滤器上下文。</param>
        </member>
        <member name="T:Rabbit.Kernel.Extensions.IExtensionLoaderCoordinator">
            <summary>
            一个抽象的扩展装载机协调员。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.IExtensionLoaderCoordinator.SetupExtensions">
            <summary>
            安装扩展。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Extensions.IExtensionManager">
            <summary>
            一个抽象的扩展管理者。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.IExtensionManager.AvailableExtensions">
            <summary>
            可用的扩展。
            </summary>
            <returns>扩展描述符条目集合。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.IExtensionManager.AvailableFeatures">
            <summary>
            可用的特性。
            </summary>
            <returns>特性描述符集合。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.IExtensionManager.GetExtension(System.String)">
            <summary>
            根据扩展Id获取指定的扩展描述符条目。
            </summary>
            <param name="id">扩展Id。</param>
            <returns>扩展描述符。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.IExtensionManager.LoadFeatures(System.Collections.Generic.IEnumerable{Rabbit.Kernel.Extensions.Models.FeatureDescriptor})">
            <summary>
            加载特性。
            </summary>
            <param name="featureDescriptors">特性描述符。</param>
            <returns>特性集合。</returns>
        </member>
        <member name="T:Rabbit.Kernel.Extensions.ExtensionManagerExtensions">
            <summary>
            扩展管理者扩展方法。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.ExtensionManagerExtensions.EnabledFeatures(Rabbit.Kernel.Extensions.IExtensionManager,Rabbit.Kernel.Environment.Descriptor.Models.ShellDescriptor)">
            <summary>
            获取开启的特性。
            </summary>
            <param name="extensionManager">扩展管理者。</param>
            <param name="descriptor">外壳描述符。</param>
            <returns></returns>
        </member>
        <member name="T:Rabbit.Kernel.Extensions.IExtensionMonitoringCoordinator">
            <summary>
            一个抽象的扩展监控协调者。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.IExtensionMonitoringCoordinator.MonitorExtensions(System.Action{Rabbit.Kernel.Caching.IVolatileToken})">
            <summary>
            监控扩展。
            </summary>
            <param name="monitor">监控动作。</param>
        </member>
        <member name="T:Rabbit.Kernel.Extensions.FeatureDescriptorFilterContext">
            <summary>
            特性描述符过滤器上下文。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.FeatureDescriptorFilterContext.#ctor(Rabbit.Kernel.Extensions.Models.FeatureDescriptor)">
            <summary>
            初始化一个新的特性描述符过滤器上下文。
            </summary>
            <param name="feature">特性描述符。</param>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.FeatureDescriptorFilterContext.Feature">
            <summary>
            特性描述符。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.FeatureDescriptorFilterContext.Valid">
            <summary>
            是否可用。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Extensions.IFeatureDescriptorFilter">
            <summary>
            一个抽象的特性描述符过滤器。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.IFeatureDescriptorFilter.OnDiscovery(Rabbit.Kernel.Extensions.FeatureDescriptorFilterContext)">
            <summary>
            在发现特性时执行。
            </summary>
            <param name="context">特性描述符过滤器上下文。</param>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Impl.DefaultExtensionLoaderCoordinator.SetupExtensions">
            <summary>
            安装扩展。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Impl.DefaultExtensionManager.AvailableExtensions">
            <summary>
                可用的扩展。
            </summary>
            <returns>扩展描述符条目集合。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Impl.DefaultExtensionManager.AvailableFeatures">
            <summary>
                可用的特性。
            </summary>
            <returns>特性描述符集合。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Impl.DefaultExtensionManager.GetExtension(System.String)">
            <summary>
                根据扩展Id获取指定的扩展描述符。
            </summary>
            <param name="id">扩展Id。</param>
            <returns>扩展描述符条目。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Impl.DefaultExtensionManager.LoadFeatures(System.Collections.Generic.IEnumerable{Rabbit.Kernel.Extensions.Models.FeatureDescriptor})">
            <summary>
                加载特性。
            </summary>
            <param name="featureDescriptors">特性描述符。</param>
            <returns>特性集合。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Impl.DefaultExtensionMonitoringCoordinator.MonitorExtensions(System.Action{Rabbit.Kernel.Caching.IVolatileToken})">
            <summary>
            监控扩展。
            </summary>
            <param name="monitor">监控动作。</param>
        </member>
        <member name="T:Rabbit.Kernel.Extensions.Loaders.ExtensionLoaderBase">
            <summary>
            扩展装载机基类。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Extensions.Loaders.IExtensionLoader">
            <summary>
            一个抽象的扩展装载机。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.IExtensionLoader.ProbeReferences(Rabbit.Kernel.Extensions.Models.ExtensionDescriptorEntry)">
            <summary>
            探测引用。
            </summary>
            <param name="descriptor">扩展描述符条目。</param>
            <returns>扩展音域探测条目集合。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.IExtensionLoader.LoadReference(Rabbit.Kernel.FileSystems.Dependencies.DependencyReferenceDescriptor)">
            <summary>
            装载引用。
            </summary>
            <param name="reference">引用描述符。</param>
            <returns>程序集。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.IExtensionLoader.ReferenceActivated(Rabbit.Kernel.Extensions.ExtensionLoadingContext,Rabbit.Kernel.Extensions.Loaders.ExtensionReferenceProbeEntry)">
            <summary>
            激活引用。
            </summary>
            <param name="context">扩展装载上下文。</param>
            <param name="referenceEntry">引用条目。</param>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.IExtensionLoader.ReferenceDeactivated(Rabbit.Kernel.Extensions.ExtensionLoadingContext,Rabbit.Kernel.Extensions.Loaders.ExtensionReferenceProbeEntry)">
            <summary>
            引用停用。
            </summary>
            <param name="context">扩展装载上下文。</param>
            <param name="referenceEntry">引用条目。</param>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.IExtensionLoader.IsCompatibleWithModuleReferences(Rabbit.Kernel.Extensions.Models.ExtensionDescriptorEntry,System.Collections.Generic.IEnumerable{Rabbit.Kernel.Extensions.Loaders.ExtensionProbeEntry})">
             <summary>
            
             </summary>
             <param name="descriptor">扩展描述符条目。</param>
             <param name="references">扩展探测条目集合。</param>
             <returns></returns>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.IExtensionLoader.Probe(Rabbit.Kernel.Extensions.Models.ExtensionDescriptorEntry)">
            <summary>
            探测。
            </summary>
            <param name="descriptor">扩展描述符条目。</param>
            <returns>扩展探测条目。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.IExtensionLoader.Load(Rabbit.Kernel.Extensions.Models.ExtensionDescriptorEntry)">
            <summary>
            装载扩展。
            </summary>
            <param name="descriptor">扩展描述符条目。</param>
            <returns>扩展条目。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.IExtensionLoader.ExtensionActivated(Rabbit.Kernel.Extensions.ExtensionLoadingContext,Rabbit.Kernel.Extensions.Models.ExtensionDescriptorEntry)">
            <summary>
            扩展激活。
            </summary>
            <param name="context">扩展装载上下文。</param>
            <param name="descriptor">扩展描述符条目。</param>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.IExtensionLoader.ExtensionDeactivated(Rabbit.Kernel.Extensions.ExtensionLoadingContext,Rabbit.Kernel.Extensions.Models.ExtensionDescriptorEntry)">
            <summary>
            扩展停用。
            </summary>
            <param name="context">扩展装载上下文。</param>
            <param name="descriptor">扩展描述符条目。</param>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.IExtensionLoader.ExtensionRemoved(Rabbit.Kernel.Extensions.ExtensionLoadingContext,Rabbit.Kernel.FileSystems.Dependencies.DependencyDescriptor)">
            <summary>
            扩展删除。
            </summary>
            <param name="context">扩展装载上下文。</param>
            <param name="dependency">依赖项描述符。</param>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.IExtensionLoader.Monitor(Rabbit.Kernel.Extensions.Models.ExtensionDescriptorEntry,System.Action{Rabbit.Kernel.Caching.IVolatileToken})">
            <summary>
            监控扩展。
            </summary>
            <param name="descriptor">扩展描述符条目。</param>
            <param name="monitor">监控动作。</param>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.IExtensionLoader.GetCompilationReferences(Rabbit.Kernel.FileSystems.Dependencies.DependencyDescriptor)">
            <summary>
            获取编译引用信息。
            </summary>
            <param name="dependency"></param>
            <returns>扩展编译引用集合。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.IExtensionLoader.GetVirtualPathDependencies(Rabbit.Kernel.FileSystems.Dependencies.DependencyDescriptor)">
            <summary>
            获取依赖文件的虚拟路径。
            </summary>
            <param name="dependency">依赖项描述符。</param>
            <returns>虚拟路径集合。</returns>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Loaders.IExtensionLoader.Order">
            <summary>
            排序。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Loaders.IExtensionLoader.Name">
            <summary>
            装载机名称。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.ExtensionLoaderBase.#ctor(Rabbit.Kernel.FileSystems.Dependencies.IDependenciesFolder)">
            <summary>
            初始化一个新的扩展装载机。
            </summary>
            <param name="dependenciesFolder">依赖文件夹。</param>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.ExtensionLoaderBase.ProbeReferences(Rabbit.Kernel.Extensions.Models.ExtensionDescriptorEntry)">
            <summary>
            探测引用。
            </summary>
            <param name="descriptor">扩展描述符条目。</param>
            <returns>扩展音域探测条目集合。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.ExtensionLoaderBase.LoadReference(Rabbit.Kernel.FileSystems.Dependencies.DependencyReferenceDescriptor)">
            <summary>
            装载引用。
            </summary>
            <param name="reference">引用描述符。</param>
            <returns>程序集。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.ExtensionLoaderBase.ReferenceActivated(Rabbit.Kernel.Extensions.ExtensionLoadingContext,Rabbit.Kernel.Extensions.Loaders.ExtensionReferenceProbeEntry)">
            <summary>
            激活引用。
            </summary>
            <param name="context">扩展装载上下文。</param>
            <param name="referenceEntry">引用条目。</param>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.ExtensionLoaderBase.ReferenceDeactivated(Rabbit.Kernel.Extensions.ExtensionLoadingContext,Rabbit.Kernel.Extensions.Loaders.ExtensionReferenceProbeEntry)">
            <summary>
            引用停用。
            </summary>
            <param name="context">扩展装载上下文。</param>
            <param name="referenceEntry">引用条目。</param>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.ExtensionLoaderBase.IsCompatibleWithModuleReferences(Rabbit.Kernel.Extensions.Models.ExtensionDescriptorEntry,System.Collections.Generic.IEnumerable{Rabbit.Kernel.Extensions.Loaders.ExtensionProbeEntry})">
             <summary>
            
             </summary>
             <param name="descriptor">扩展描述符条目。</param>
             <param name="references">扩展探测条目集合。</param>
             <returns></returns>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.ExtensionLoaderBase.Probe(Rabbit.Kernel.Extensions.Models.ExtensionDescriptorEntry)">
            <summary>
            探测。
            </summary>
            <param name="descriptor">扩展描述符条目。</param>
            <returns>扩展探测条目。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.ExtensionLoaderBase.Load(Rabbit.Kernel.Extensions.Models.ExtensionDescriptorEntry)">
            <summary>
            装载扩展。
            </summary>
            <param name="descriptor">扩展描述符条目。</param>
            <returns>扩展条目。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.ExtensionLoaderBase.ExtensionActivated(Rabbit.Kernel.Extensions.ExtensionLoadingContext,Rabbit.Kernel.Extensions.Models.ExtensionDescriptorEntry)">
            <summary>
            扩展激活。
            </summary>
            <param name="context">扩展装载上下文。</param>
            <param name="descriptor">扩展描述符条目。</param>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.ExtensionLoaderBase.ExtensionDeactivated(Rabbit.Kernel.Extensions.ExtensionLoadingContext,Rabbit.Kernel.Extensions.Models.ExtensionDescriptorEntry)">
            <summary>
            扩展停用。
            </summary>
            <param name="context">扩展装载上下文。</param>
            <param name="descriptor">扩展描述符条目。</param>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.ExtensionLoaderBase.ExtensionRemoved(Rabbit.Kernel.Extensions.ExtensionLoadingContext,Rabbit.Kernel.FileSystems.Dependencies.DependencyDescriptor)">
            <summary>
            扩展删除。
            </summary>
            <param name="context">扩展装载上下文。</param>
            <param name="dependency">依赖项描述符。</param>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.ExtensionLoaderBase.Monitor(Rabbit.Kernel.Extensions.Models.ExtensionDescriptorEntry,System.Action{Rabbit.Kernel.Caching.IVolatileToken})">
            <summary>
            监控扩展。
            </summary>
            <param name="descriptor">扩展描述符条目。</param>
            <param name="monitor">监控动作。</param>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.ExtensionLoaderBase.GetCompilationReferences(Rabbit.Kernel.FileSystems.Dependencies.DependencyDescriptor)">
            <summary>
            获取编译引用信息。
            </summary>
            <param name="dependency"></param>
            <returns>扩展编译引用集合。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.ExtensionLoaderBase.GetVirtualPathDependencies(Rabbit.Kernel.FileSystems.Dependencies.DependencyDescriptor)">
            <summary>
            获取依赖文件的虚拟路径。
            </summary>
            <param name="dependency">依赖项描述符。</param>
            <returns>虚拟路径集合。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.ExtensionLoaderBase.LoadWorker(Rabbit.Kernel.Extensions.Models.ExtensionDescriptorEntry)">
            <summary>
            装载工作。
            </summary>
            <param name="descriptor">扩展描述符条目。</param>
            <returns>扩展条目。</returns>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Loaders.ExtensionLoaderBase.Order">
            <summary>
            排序。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Loaders.ExtensionLoaderBase.Name">
            <summary>
            装载机名称。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Extensions.Loaders.ExtensionProbeEntry">
            <summary>
            扩展探测条目。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Loaders.ExtensionProbeEntry.Descriptor">
            <summary>
            扩展描述符条目。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Loaders.ExtensionProbeEntry.Loader">
            <summary>
            扩展装载机。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Loaders.ExtensionProbeEntry.Priority">
            <summary>
            优先级。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Loaders.ExtensionProbeEntry.VirtualPath">
            <summary>
            虚拟路径。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Loaders.ExtensionProbeEntry.VirtualPathDependencies">
            <summary>
            虚拟路径依赖项。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Extensions.Loaders.ExtensionReferenceProbeEntry">
            <summary>
            扩展音域探测条目。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Loaders.ExtensionReferenceProbeEntry.Descriptor">
            <summary>
            扩展描述符条目。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Loaders.ExtensionReferenceProbeEntry.Loader">
            <summary>
            扩展装载机。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Loaders.ExtensionReferenceProbeEntry.Name">
            <summary>
            名称。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Loaders.ExtensionReferenceProbeEntry.VirtualPath">
            <summary>
            虚拟路径。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Extensions.Loaders.ExtensionCompilationReference">
            <summary>
            扩展编译引用。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Loaders.ExtensionCompilationReference.AssemblyName">
            <summary>
            程序集名称。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Loaders.ExtensionCompilationReference.BuildProviderTarget">
            <summary>
            目标生成提供程序。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.Impl.PrecompiledExtensionLoader.#ctor(Rabbit.Kernel.FileSystems.Dependencies.IDependenciesFolder,Rabbit.Kernel.Environment.IHostEnvironment,Rabbit.Kernel.FileSystems.Dependencies.IAssemblyProbingFolder,Rabbit.Kernel.FileSystems.Application.IApplicationFolder)">
            <summary>
            初始化一个新的扩展装载机。
            </summary>
            <param name="dependenciesFolder">依赖文件夹。</param>
            <param name="assemblyProbingFolder">程序集探测文件夹。</param>
            <param name="applicationFolder">应用程序文件夹。</param>
            <param name="hostEnvironment">主机环境。</param>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.Impl.PrecompiledExtensionLoader.ProbeReferences(Rabbit.Kernel.Extensions.Models.ExtensionDescriptorEntry)">
            <summary>
            探测引用。
            </summary>
            <param name="descriptor">扩展描述符条目。</param>
            <returns>扩展音域探测条目集合。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.Impl.PrecompiledExtensionLoader.LoadReference(Rabbit.Kernel.FileSystems.Dependencies.DependencyReferenceDescriptor)">
            <summary>
            装载引用。
            </summary>
            <param name="reference">引用描述符。</param>
            <returns>程序集。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.Impl.PrecompiledExtensionLoader.ReferenceActivated(Rabbit.Kernel.Extensions.ExtensionLoadingContext,Rabbit.Kernel.Extensions.Loaders.ExtensionReferenceProbeEntry)">
            <summary>
            激活引用。
            </summary>
            <param name="context">扩展装载上下文。</param>
            <param name="referenceEntry">引用条目。</param>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.Impl.PrecompiledExtensionLoader.IsCompatibleWithModuleReferences(Rabbit.Kernel.Extensions.Models.ExtensionDescriptorEntry,System.Collections.Generic.IEnumerable{Rabbit.Kernel.Extensions.Loaders.ExtensionProbeEntry})">
             <summary>
            
             </summary>
             <param name="descriptor">扩展描述符条目。</param>
             <param name="references">扩展探测条目集合。</param>
             <returns></returns>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.Impl.PrecompiledExtensionLoader.Probe(Rabbit.Kernel.Extensions.Models.ExtensionDescriptorEntry)">
            <summary>
            探测。
            </summary>
            <param name="descriptor">扩展描述符条目。</param>
            <returns>扩展探测条目。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.Impl.PrecompiledExtensionLoader.ExtensionActivated(Rabbit.Kernel.Extensions.ExtensionLoadingContext,Rabbit.Kernel.Extensions.Models.ExtensionDescriptorEntry)">
            <summary>
            扩展激活。
            </summary>
            <param name="context">扩展装载上下文。</param>
            <param name="descriptor">扩展描述符条目。</param>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.Impl.PrecompiledExtensionLoader.ExtensionDeactivated(Rabbit.Kernel.Extensions.ExtensionLoadingContext,Rabbit.Kernel.Extensions.Models.ExtensionDescriptorEntry)">
            <summary>
            扩展停用。
            </summary>
            <param name="context">扩展装载上下文。</param>
            <param name="descriptor">扩展描述符条目。</param>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.Impl.PrecompiledExtensionLoader.ExtensionRemoved(Rabbit.Kernel.Extensions.ExtensionLoadingContext,Rabbit.Kernel.FileSystems.Dependencies.DependencyDescriptor)">
            <summary>
            扩展删除。
            </summary>
            <param name="context">扩展装载上下文。</param>
            <param name="dependency">依赖项描述符。</param>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.Impl.PrecompiledExtensionLoader.Monitor(Rabbit.Kernel.Extensions.Models.ExtensionDescriptorEntry,System.Action{Rabbit.Kernel.Caching.IVolatileToken})">
            <summary>
            监控扩展。
            </summary>
            <param name="descriptor">扩展描述符条目。</param>
            <param name="monitor">监控动作。</param>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.Impl.PrecompiledExtensionLoader.GetCompilationReferences(Rabbit.Kernel.FileSystems.Dependencies.DependencyDescriptor)">
            <summary>
            获取编译引用信息。
            </summary>
            <param name="dependency"></param>
            <returns>扩展编译引用集合。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.Impl.PrecompiledExtensionLoader.GetVirtualPathDependencies(Rabbit.Kernel.FileSystems.Dependencies.DependencyDescriptor)">
            <summary>
            获取依赖文件的虚拟路径。
            </summary>
            <param name="dependency">依赖项描述符。</param>
            <returns>虚拟路径集合。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.Impl.PrecompiledExtensionLoader.LoadWorker(Rabbit.Kernel.Extensions.Models.ExtensionDescriptorEntry)">
            <summary>
            装载工作。
            </summary>
            <param name="descriptor">扩展描述符条目。</param>
            <returns>扩展条目。</returns>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Loaders.Impl.PrecompiledExtensionLoader.Order">
            <summary>
            排序。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.Impl.ReferencedExtensionLoader.#ctor(Rabbit.Kernel.FileSystems.Dependencies.IDependenciesFolder,Rabbit.Kernel.FileSystems.VirtualPath.IVirtualPathProvider,Rabbit.Kernel.Environment.IBuildManager)">
            <summary>
            初始化一个新的扩展装载机。
            </summary>
            <param name="dependenciesFolder">依赖文件夹。</param>
            <param name="virtualPathProvider">虚拟路径提供程序。</param>
            <param name="buildManager">生成管理者。</param>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.Impl.ReferencedExtensionLoader.Probe(Rabbit.Kernel.Extensions.Models.ExtensionDescriptorEntry)">
            <summary>
            探测。
            </summary>
            <param name="descriptor">扩展描述符条目。</param>
            <returns>扩展探测条目。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.Impl.ReferencedExtensionLoader.ExtensionDeactivated(Rabbit.Kernel.Extensions.ExtensionLoadingContext,Rabbit.Kernel.Extensions.Models.ExtensionDescriptorEntry)">
            <summary>
            扩展停用。
            </summary>
            <param name="context">扩展装载上下文。</param>
            <param name="descriptor">扩展描述符条目。</param>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.Impl.ReferencedExtensionLoader.ExtensionRemoved(Rabbit.Kernel.Extensions.ExtensionLoadingContext,Rabbit.Kernel.FileSystems.Dependencies.DependencyDescriptor)">
            <summary>
            扩展删除。
            </summary>
            <param name="context">扩展装载上下文。</param>
            <param name="dependency">依赖项描述符。</param>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Loaders.Impl.ReferencedExtensionLoader.LoadWorker(Rabbit.Kernel.Extensions.Models.ExtensionDescriptorEntry)">
            <summary>
            装载工作。
            </summary>
            <param name="descriptor">扩展描述符条目。</param>
            <returns>扩展条目。</returns>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Loaders.Impl.ReferencedExtensionLoader.Order">
            <summary>
            排序。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Extensions.Models.ExtensionDescriptor">
            <summary>
            扩展描述符。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Models.ExtensionDescriptor.Path">
            <summary>
            路径。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Models.ExtensionDescriptor.Name">
            <summary>
            名称。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Models.ExtensionDescriptor.Version">
            <summary>
            扩展版本。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Models.ExtensionDescriptor.Features">
            <summary>
            特性集合。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Models.ExtensionDescriptor.Dependencies">
            <summary>
            依赖特性。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Models.ExtensionDescriptor.KernelVersion">
            <summary>
            内核版本范围。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Models.ExtensionDescriptor.Description">
            <summary>
            扩展描述。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Models.ExtensionDescriptor.Tags">
            <summary>
            扩展标签。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Models.ExtensionDescriptor.Author">
            <summary>
            作者。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Models.ExtensionDescriptor.Company">
            <summary>
            公司。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Models.ExtensionDescriptor.WebSite">
            <summary>
            扩展网站。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Models.ExtensionDescriptor.Item(System.String)">
            <summary>
            扩展描述符设置索引器。
            </summary>
            <param name="key">键。</param>
            <returns>值。</returns>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Models.ExtensionDescriptor.Keys">
            <summary>
            所有扩展描述符设置键。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Extensions.Models.ExtensionDescriptorEntry">
            <summary>
            扩展描述符条目。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Models.ExtensionDescriptorEntry.#ctor(Rabbit.Kernel.Extensions.Models.ExtensionDescriptor,System.String,System.String,System.String)">
            <summary>
            初始化一个新的扩展描述符条目。
            </summary>
            <param name="descriptor">扩展描述符。</param>
            <param name="id">扩展Id。</param>
            <param name="extensionType">扩展类型。</param>
            <param name="location">扩展位置。</param>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Models.ExtensionDescriptorEntry.Descriptor">
            <summary>
            扩展描述符。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Models.ExtensionDescriptorEntry.Id">
            <summary>
            标识。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Models.ExtensionDescriptorEntry.ExtensionType">
            <summary>
            类型。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Models.ExtensionDescriptorEntry.Location">
            <summary>
            位置。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Extensions.Models.Feature">
            <summary>
            特性条目。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Models.Feature.Descriptor">
            <summary>
            特性描述符。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Models.Feature.ExportedTypes">
            <summary>
            特性中可导出的类型。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Extensions.Models.FeatureDescriptor">
            <summary>
            特性描述符。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.Models.FeatureDescriptor.#ctor">
            <summary>
            初始化一个特性描述符。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Models.FeatureDescriptor.Extension">
            <summary>
            扩展描述符。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Models.FeatureDescriptor.Id">
            <summary>
            标识。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Models.FeatureDescriptor.Name">
            <summary>
            名称。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Models.FeatureDescriptor.Description">
            <summary>
            描述。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Models.FeatureDescriptor.Category">
            <summary>
            分类。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Models.FeatureDescriptor.Priority">
            <summary>
            优先级。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.Models.FeatureDescriptor.Dependencies">
            <summary>
            依赖特性。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Extensions.SuppressDependencyAttribute">
            <summary>
            替换依赖标记。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Extensions.SuppressDependencyAttribute.#ctor(System.String)">
            <summary>
            初始化一个新的替换依赖标记。
            </summary>
            <param name="fullName">替换的类型名称。</param>
        </member>
        <member name="P:Rabbit.Kernel.Extensions.SuppressDependencyAttribute.FullName">
            <summary>
            替换的类型名称。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.FileSystems.AppData.IAppDataFolder">
            <summary>
            一个抽象的App_Data文件夹。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.FileSystems.IFolder">
            <summary>
            一个抽象的文件夹。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.FileSystems.VirtualPath.IVirtualPathProvider">
            <summary>
            一个抽象的虚拟路径提供者。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.VirtualPath.IVirtualPathProvider.Combine(System.String[])">
            <summary>
            组合路径。
            </summary>
            <param name="paths">路径数组。</param>
            <returns>组合之后的路径。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.VirtualPath.IVirtualPathProvider.MapPath(System.String)">
            <summary>
            获取虚拟路径的绝对路径。
            </summary>
            <param name="virtualPath">虚拟路径。</param>
            <returns>绝对路径。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.VirtualPath.IVirtualPathProvider.FileExists(System.String)">
            <summary>
            判断一个虚拟路径的文件是否存在。
            </summary>
            <param name="virtualPath">虚拟路径。</param>
            <returns>虚拟路径。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.VirtualPath.IVirtualPathProvider.OpenFile(System.String,System.Action{System.IO.Stream})">
            <summary>
            打开一个文件。
            </summary>
            <param name="virtualPath">虚拟路径。</param>
            <param name="action">对流的操作。</param>
            <returns>文件流。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.VirtualPath.IVirtualPathProvider.CreateText(System.String,System.Action{System.IO.StreamWriter})">
            <summary>
            在指定虚拟路径创建一个文件并创建一个写入流。
            </summary>
            <param name="virtualPath">虚拟路径。</param>
            <param name="action">对写入流的操作。</param>
            <returns>新文件的写入流。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.VirtualPath.IVirtualPathProvider.CreateFile(System.String,System.Action{System.IO.Stream})">
            <summary>
            创建一个文件。
            </summary>
            <param name="virtualPath">虚拟路径。</param>
            <param name="action">对流的操作。</param>
            <returns>文件流。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.VirtualPath.IVirtualPathProvider.GetFileLastWriteTimeUtc(System.String)">
            <summary>
            获取文件最后的写入UTC时间。
            </summary>
            <param name="virtualPath">虚拟路径。</param>
            <returns>UTC时间。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.VirtualPath.IVirtualPathProvider.GetDirectoryLastWriteTimeUtc(System.String)">
            <summary>
            获取目录最后的写入UTC时间。
            </summary>
            <param name="virtualPath">虚拟路径。</param>
            <returns>UTC时间。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.VirtualPath.IVirtualPathProvider.DeleteFile(System.String)">
            <summary>
            删除文件。
            </summary>
            <param name="virtualPath">虚拟路径。</param>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.VirtualPath.IVirtualPathProvider.DirectoryExists(System.String)">
            <summary>
            判断目录是否存在。
            </summary>
            <param name="virtualPath">虚拟路径。</param>
            <returns>如果存在则返回true，否则返回false。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.VirtualPath.IVirtualPathProvider.CreateDirectory(System.String)">
            <summary>
            创建一个目录。
            </summary>
            <param name="virtualPath">虚拟路径。</param>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.VirtualPath.IVirtualPathProvider.GetDirectoryName(System.String)">
            <summary>
            获取目录名称。
            </summary>
            <param name="virtualPath">虚拟路径。</param>
            <returns>目录名称。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.VirtualPath.IVirtualPathProvider.DeleteDirectory(System.String)">
            <summary>
            删除目录。
            </summary>
            <param name="virtualPath">虚拟路径。</param>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.VirtualPath.IVirtualPathProvider.ListFiles(System.String,System.Boolean)">
            <summary>
            获取指定路径下的所有文件。
            </summary>
            <param name="virtualPath">虚拟路径。</param>
            <param name="includeChildren">是否包含子级目录。</param>
            <returns>文件路径集合。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.VirtualPath.IVirtualPathProvider.ListDirectories(System.String,System.Boolean)">
            <summary>
            获取指定路径下的所有目录。
            </summary>
            <param name="virtualPath">虚拟路径。</param>
            <param name="includeChildren">是否包含子级目录。</param>
            <returns>目录路径集合。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.IFolder.CreateFile(System.String,System.String)">
            <summary>
            创建文件。
            </summary>
            <param name="path">文件路径。</param>
            <param name="content">文件内容。</param>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.IFolder.ReadFile(System.String)">
            <summary>
            读取文件内容。
            </summary>
            <param name="path">文件路径。</param>
            <returns>文件内容。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.IFolder.StoreFile(System.String,System.String)">
            <summary>
            储存文件。
            </summary>
            <param name="sourceFileName">源文件名称。</param>
            <param name="destinationPath">目标文件路径。</param>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.IFolder.WhenPathChanges(System.String)">
            <summary>
            指定路径的文件或文件夹是否发生变更。
            </summary>
            <param name="path">路径。</param>
            <returns>挥发令牌。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.IFolder.GetVirtualPath(System.String)">
            <summary>
            获取路径的虚拟路径。
            </summary>
            <param name="path">路径。</param>
            <returns>虚拟路径。</returns>
        </member>
        <member name="T:Rabbit.Kernel.Component">
            <summary>
            一个抽象的组件。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Component.#ctor">
            <summary>
            初始化一个抽象的组件。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Component.Logger">
            <summary>
            日志记录器。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Component.T">
            <summary>
            本地化委托。
            </summary>
        </member>
        <member name="F:Rabbit.Kernel.FileSystems.VirtualPathProviderBase.ApplicationRootFolder">
            <summary>
            应用程序根文件夹路径 MapPath("~/")
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.VirtualPathProviderBase.Combine(System.String[])">
            <summary>
            组合路径。
            </summary>
            <param name="paths">路径数组。</param>
            <returns>组合之后的路径。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.VirtualPathProviderBase.MapPath(System.String)">
            <summary>
            获取虚拟路径的绝对路径。
            </summary>
            <param name="virtualPath">虚拟路径。</param>
            <returns>绝对路径。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.VirtualPathProviderBase.FileExists(System.String)">
            <summary>
            判断一个虚拟路径的文件是否存在。
            </summary>
            <param name="virtualPath">虚拟路径。</param>
            <returns>虚拟路径。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.VirtualPathProviderBase.OpenFile(System.String,System.Action{System.IO.Stream})">
            <summary>
            打开一个文件。
            </summary>
            <param name="virtualPath">虚拟路径。</param>
            <param name="action">对流的操作。</param>
            <returns>文件流。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.VirtualPathProviderBase.CreateText(System.String,System.Action{System.IO.StreamWriter})">
            <summary>
            在指定虚拟路径创建一个文件并创建一个写入流。
            </summary>
            <param name="virtualPath">虚拟路径。</param>
            <param name="action">对写入流的操作。</param>
            <returns>新文件的写入流。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.VirtualPathProviderBase.CreateFile(System.String,System.Action{System.IO.Stream})">
            <summary>
            创建一个文件。
            </summary>
            <param name="virtualPath">虚拟路径。</param>
            <param name="action">对流的操作。</param>
            <returns>文件流。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.VirtualPathProviderBase.GetFileLastWriteTimeUtc(System.String)">
            <summary>
            获取文件最后的写入UTC时间。
            </summary>
            <param name="virtualPath">虚拟路径。</param>
            <returns>UTC时间。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.VirtualPathProviderBase.GetDirectoryLastWriteTimeUtc(System.String)">
            <summary>
            获取目录最后的写入UTC时间。
            </summary>
            <param name="virtualPath">虚拟路径。</param>
            <returns>UTC时间。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.VirtualPathProviderBase.DeleteFile(System.String)">
            <summary>
            删除文件。
            </summary>
            <param name="virtualPath">虚拟路径。</param>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.VirtualPathProviderBase.DirectoryExists(System.String)">
            <summary>
            判断目录是否存在。
            </summary>
            <param name="virtualPath">虚拟路径。</param>
            <returns>如果存在则返回true，否则返回false。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.VirtualPathProviderBase.CreateDirectory(System.String)">
            <summary>
            创建一个目录。
            </summary>
            <param name="virtualPath">虚拟路径。</param>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.VirtualPathProviderBase.GetDirectoryName(System.String)">
            <summary>
            获取目录名称。
            </summary>
            <param name="virtualPath">虚拟路径。</param>
            <returns>目录名称。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.VirtualPathProviderBase.DeleteDirectory(System.String)">
            <summary>
            删除目录。
            </summary>
            <param name="virtualPath">虚拟路径。</param>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.VirtualPathProviderBase.ListFiles(System.String,System.Boolean)">
            <summary>
            获取指定路径下的所有文件。
            </summary>
            <param name="virtualPath">虚拟路径。</param>
            <param name="includeChildren">是否包含子级目录。</param>
            <returns>文件路径集合。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.VirtualPathProviderBase.ListDirectories(System.String,System.Boolean)">
            <summary>
            获取指定路径下的所有目录。
            </summary>
            <param name="virtualPath">虚拟路径。</param>
            <param name="includeChildren">是否包含子级目录。</param>
            <returns>目录路径集合。</returns>
        </member>
        <member name="P:Rabbit.Kernel.FileSystems.VirtualPathProviderBase.RootFolder">
            <summary>
            根文件夹路径 MapPath(RootPath)
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.FileSystems.VirtualPathProviderBase.RootPath">
            <summary>
            根文件夹虚拟路径 ~/ or ~/Abc
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.FolderBase.CreateFile(System.String,System.String)">
            <summary>
            创建文件。
            </summary>
            <param name="path">文件路径。</param>
            <param name="content">文件内容。</param>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.FolderBase.ReadFile(System.String)">
            <summary>
            读取文件内容。
            </summary>
            <param name="virtualPath">文件虚拟路径。</param>
            <returns>文件内容。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.FolderBase.StoreFile(System.String,System.String)">
            <summary>
            储存文件。
            </summary>
            <param name="sourceFileName">源文件名称。</param>
            <param name="destinationPath">目标文件路径。</param>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.FolderBase.WhenPathChanges(System.String)">
            <summary>
            指定路径的文件或文件夹是否发生变更。
            </summary>
            <param name="path">路径。</param>
            <returns>挥发令牌。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.FolderBase.GetVirtualPath(System.String)">
            <summary>
            获取路径的虚拟路径。
            </summary>
            <param name="path">路径。</param>
            <returns>虚拟路径。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.AppData.Impl.DefaultAppDataFolder.MapPath(System.String)">
            <summary>
            获取虚拟路径的绝对路径。
            </summary>
            <param name="virtualPath">虚拟路径。</param>
            <returns>绝对路径。</returns>
        </member>
        <member name="P:Rabbit.Kernel.FileSystems.AppData.Impl.DefaultAppDataFolder.RootPath">
            <summary>
            根文件夹虚拟路径 ~/ or ~/Abc
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.FileSystems.Application.IApplicationFolder">
            <summary>
            一个抽象的应用程序文件夹。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.FileSystems.Application.Impl.DefaultApplicationFolder.RootPath">
            <summary>
            根文件夹虚拟路径 ~/ or ~/Abc
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.FileSystems.Dependencies.DependencyDescriptor">
            <summary>
            依赖项描述符。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.Dependencies.DependencyDescriptor.#ctor">
            <summary>
            初始化一个新的依赖项描述符实例。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.FileSystems.Dependencies.DependencyDescriptor.Name">
            <summary>
            名称。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.FileSystems.Dependencies.DependencyDescriptor.LoaderName">
            <summary>
            装载机名称。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.FileSystems.Dependencies.DependencyDescriptor.VirtualPath">
            <summary>
            虚拟路径。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.FileSystems.Dependencies.DependencyDescriptor.References">
            <summary>
            引用集合。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.FileSystems.Dependencies.DependencyReferenceDescriptor">
            <summary>
            依赖项引用描述符。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.FileSystems.Dependencies.DependencyReferenceDescriptor.Name">
            <summary>
            名称。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.FileSystems.Dependencies.DependencyReferenceDescriptor.LoaderName">
            <summary>
            装载机。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.FileSystems.Dependencies.DependencyReferenceDescriptor.VirtualPath">
            <summary>
            虚拟路径。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.FileSystems.Dependencies.IAssemblyProbingFolder">
            <summary>
            一个抽象的程序集探测文件夹。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.Dependencies.IAssemblyProbingFolder.AssemblyExists(Rabbit.Kernel.Environment.Assemblies.Models.AssemblyDescriptor)">
            <summary>
            程序集是否存在。
            </summary>
            <param name="descriptor">程序集描述符。</param>
            <returns>true为存在，false为不存在。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.Dependencies.IAssemblyProbingFolder.GetAssemblyDateTimeUtc(Rabbit.Kernel.Environment.Assemblies.Models.AssemblyDescriptor)">
            <summary>
            获取程序集的最后修改的Utc时间，如果不存在则返回null。
            </summary>
            <param name="descriptor">程序集描述符。</param>
            <returns>Utc时间。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.Dependencies.IAssemblyProbingFolder.GetAssemblyVirtualPath(Rabbit.Kernel.Environment.Assemblies.Models.AssemblyDescriptor)">
            <summary>
            获取程序集的虚拟路径。
            </summary>
            <param name="descriptor">程序集描述符。</param>
            <returns>虚拟路径。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.Dependencies.IAssemblyProbingFolder.LoadAssembly(Rabbit.Kernel.Environment.Assemblies.Models.AssemblyDescriptor)">
            <summary>
            装载程序集。
            </summary>
            <param name="descriptor">程序集描述符。</param>
            <returns>程序集。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.Dependencies.IAssemblyProbingFolder.DeleteAssembly(Rabbit.Kernel.Environment.Assemblies.Models.AssemblyDescriptor)">
            <summary>
            删除程序集。
            </summary>
            <param name="descriptor">程序集描述符。</param>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.Dependencies.IAssemblyProbingFolder.StoreAssembly(Rabbit.Kernel.Environment.Assemblies.Models.AssemblyDescriptor,System.String)">
            <summary>
            存储程序集。
            </summary>
            <param name="descriptor">程序集描述符。</param>
            <param name="fileName">程序集文件名称。</param>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.Dependencies.IAssemblyProbingFolder.DeleteAssembly(System.String)">
            <summary>
            删除程序集。
            </summary>
            <param name="moduleName">模块名称。</param>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.Dependencies.IAssemblyProbingFolder.StoreAssembly(System.String)">
            <summary>
            存储程序集。
            </summary>
            <param name="moduleName">模块名称。</param>
        </member>
        <member name="T:Rabbit.Kernel.FileSystems.Dependencies.IDependenciesFolder">
            <summary>
            一个抽象的依赖项文件夹。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.Dependencies.IDependenciesFolder.GetDescriptor(System.String)">
            <summary>
            获取一个依赖项描述符。
            </summary>
            <param name="moduleName">模块名称。</param>
            <returns>依赖项描述符。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.Dependencies.IDependenciesFolder.LoadDescriptors">
            <summary>
            装载所有依赖项描述符。
            </summary>
            <returns>依赖项描述符集合。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.Dependencies.IDependenciesFolder.StoreDescriptors(System.Collections.Generic.IEnumerable{Rabbit.Kernel.FileSystems.Dependencies.DependencyDescriptor})">
            <summary>
            存储依赖项描述符。
            </summary>
            <param name="dependencyDescriptors">依赖项描述符集合。</param>
        </member>
        <member name="T:Rabbit.Kernel.FileSystems.Dependencies.ActivatedExtensionDescriptor">
            <summary>
            已经激活的扩展描述符。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.FileSystems.Dependencies.ActivatedExtensionDescriptor.ExtensionId">
            <summary>
            扩展Id。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.FileSystems.Dependencies.ActivatedExtensionDescriptor.LoaderName">
            <summary>
            装载机名称。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.FileSystems.Dependencies.ActivatedExtensionDescriptor.VirtualPath">
            <summary>
            虚拟路径。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.FileSystems.Dependencies.ActivatedExtensionDescriptor.Hash">
            <summary>
            哈希值。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.FileSystems.Dependencies.IExtensionDependenciesManager">
            <summary>
            一个抽象的扩展依管理者。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.Dependencies.IExtensionDependenciesManager.StoreDependencies(System.Collections.Generic.IEnumerable{Rabbit.Kernel.FileSystems.Dependencies.DependencyDescriptor},System.Func{Rabbit.Kernel.FileSystems.Dependencies.DependencyDescriptor,System.String})">
            <summary>
            存储依赖。
            </summary>
            <param name="dependencyDescriptors">依赖描述符集合。</param>
            <param name="fileHashProvider">文件哈希值提供程序。</param>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.Dependencies.IExtensionDependenciesManager.GetVirtualPathDependencies(System.String)">
            <summary>
            获取扩展的虚拟路径依赖项。
            </summary>
            <param name="extensionId">扩展Id。</param>
            <returns>虚拟路径集合。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.Dependencies.IExtensionDependenciesManager.GetDescriptor(System.String)">
            <summary>
            获取一个已经激活的扩展描述符。
            </summary>
            <param name="extensionId">扩展Id。</param>
            <returns>已经激活的扩展描述符。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.Dependencies.Impl.DefaultAssemblyProbingFolder.AssemblyExists(Rabbit.Kernel.Environment.Assemblies.Models.AssemblyDescriptor)">
            <summary>
            程序集是否存在。
            </summary>
            <param name="descriptor">程序集描述符。</param>
            <returns>true为存在，false为不存在。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.Dependencies.Impl.DefaultAssemblyProbingFolder.GetAssemblyDateTimeUtc(Rabbit.Kernel.Environment.Assemblies.Models.AssemblyDescriptor)">
            <summary>
            获取程序集的最后修改的Utc时间，如果不存在则返回null。
            </summary>
            <param name="descriptor">程序集描述符。</param>
            <returns>Utc时间。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.Dependencies.Impl.DefaultAssemblyProbingFolder.GetAssemblyVirtualPath(Rabbit.Kernel.Environment.Assemblies.Models.AssemblyDescriptor)">
            <summary>
            获取程序集的虚拟路径。
            </summary>
            <param name="descriptor">程序集描述符。</param>
            <returns>虚拟路径。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.Dependencies.Impl.DefaultAssemblyProbingFolder.LoadAssembly(Rabbit.Kernel.Environment.Assemblies.Models.AssemblyDescriptor)">
            <summary>
            装载程序集。
            </summary>
            <param name="descriptor">程序集描述符。</param>
            <returns>程序集。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.Dependencies.Impl.DefaultAssemblyProbingFolder.DeleteAssembly(Rabbit.Kernel.Environment.Assemblies.Models.AssemblyDescriptor)">
            <summary>
            删除程序集。
            </summary>
            <param name="descriptor">程序集描述符。</param>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.Dependencies.Impl.DefaultAssemblyProbingFolder.StoreAssembly(Rabbit.Kernel.Environment.Assemblies.Models.AssemblyDescriptor,System.String)">
            <summary>
            存储程序集。
            </summary>
            <param name="descriptor">程序集描述符。</param>
            <param name="fileName">程序集文件名称。</param>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.Dependencies.Impl.DefaultAssemblyProbingFolder.DeleteAssembly(System.String)">
            <summary>
            删除程序集。
            </summary>
            <param name="moduleName">模块名称。</param>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.Dependencies.Impl.DefaultAssemblyProbingFolder.StoreAssembly(System.String)">
            <summary>
            存储程序集。
            </summary>
            <param name="moduleName">模块名称。</param>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.Dependencies.Impl.DefaultDependenciesFolder.GetDescriptor(System.String)">
            <summary>
            获取一个依赖项描述符。
            </summary>
            <param name="moduleName">模块名称。</param>
            <returns>依赖项描述符。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.Dependencies.Impl.DefaultDependenciesFolder.LoadDescriptors">
            <summary>
            装载所有依赖项描述符。
            </summary>
            <returns>依赖项描述符集合。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.Dependencies.Impl.DefaultDependenciesFolder.StoreDescriptors(System.Collections.Generic.IEnumerable{Rabbit.Kernel.FileSystems.Dependencies.DependencyDescriptor})">
            <summary>
            存储依赖项描述符。
            </summary>
            <param name="dependencyDescriptors">依赖项描述符集合。</param>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.Dependencies.Impl.DefaultExtensionDependenciesManager.StoreDependencies(System.Collections.Generic.IEnumerable{Rabbit.Kernel.FileSystems.Dependencies.DependencyDescriptor},System.Func{Rabbit.Kernel.FileSystems.Dependencies.DependencyDescriptor,System.String})">
            <summary>
            存储依赖。
            </summary>
            <param name="dependencyDescriptors">依赖描述符集合。</param>
            <param name="fileHashProvider">文件哈希值提供程序。</param>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.Dependencies.Impl.DefaultExtensionDependenciesManager.GetVirtualPathDependencies(System.String)">
            <summary>
            获取扩展的虚拟路径依赖项。
            </summary>
            <param name="extensionId">扩展Id。</param>
            <returns>虚拟路径集合。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.Dependencies.Impl.DefaultExtensionDependenciesManager.GetDescriptor(System.String)">
            <summary>
            获取一个已经激活的扩展描述符。
            </summary>
            <param name="extensionId">扩展Id。</param>
            <returns>已经激活的扩展描述符。</returns>
        </member>
        <member name="T:Rabbit.Kernel.FileSystems.VirtualPath.IVirtualPathMonitor">
            <summary>
            一个抽象的虚拟路径监视者。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.VirtualPath.IVirtualPathMonitor.WhenPathChanges(System.String)">
            <summary>
            检测路径是否被更改。
            </summary>
            <param name="virtualPath">需要监测的虚拟路径。</param>
            <returns>挥发令牌。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.VirtualPath.Impl.DefaultVirtualPathMonitor.WhenPathChanges(System.String)">
            <summary>
            检测路径是否被更改。
            </summary>
            <param name="virtualPath">需要监测的虚拟路径。</param>
            <returns>挥发令牌。</returns>
        </member>
        <member name="P:Rabbit.Kernel.FileSystems.VirtualPath.Impl.DefaultVirtualPathProvider.RootPath">
            <summary>
            根文件夹虚拟路径 ~/ or ~/Abc
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.FileSystems.VirtualPath.VirtualPathProviderExtensions">
            <summary>
            虚拟路径提供者扩展方法。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.VirtualPath.VirtualPathProviderExtensions.OpenFileFunc``1(Rabbit.Kernel.FileSystems.VirtualPath.IVirtualPathProvider,System.String,System.Func{System.IO.Stream,``0})">
            <summary>
            打开一个文件。
            </summary>
            <typeparam name="T">返回值类型。</typeparam>
            <param name="virtualPathProvider">虚拟路径提供者。</param>
            <param name="virtualPath">虚拟路径。</param>
            <param name="func">对流的操作。</param>
            <returns>文件流。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.VirtualPath.VirtualPathProviderExtensions.CreateFileFunc``1(Rabbit.Kernel.FileSystems.VirtualPath.IVirtualPathProvider,System.String,System.Func{System.IO.Stream,``0})">
            <summary>
            创建一个文件。
            </summary>
            <typeparam name="T">返回值类型。</typeparam>
            <param name="virtualPathProvider">虚拟路径提供者。</param>
            <param name="virtualPath">虚拟路径。</param>
            <param name="func">对流的操作。</param>
            <returns>文件流。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.VirtualPath.VirtualPathProviderExtensions.CreateTextFunc``1(Rabbit.Kernel.FileSystems.VirtualPath.IVirtualPathProvider,System.String,System.Func{System.IO.StreamWriter,``0})">
            <summary>
            在指定虚拟路径创建一个文件并创建一个写入流。
            </summary>
            <typeparam name="T">返回值类型。</typeparam>
            <param name="virtualPathProvider">虚拟路径提供者。</param>
            <param name="virtualPath">虚拟路径。</param>
            <param name="func">对写入流的操作。</param>
            <returns>新文件的写入流。</returns>
        </member>
        <member name="M:Rabbit.Kernel.FileSystems.VirtualPath.VirtualPathProviderExtensions.GetLastWriteTimeUtc(Rabbit.Kernel.FileSystems.VirtualPath.IVirtualPathProvider,System.String)">
            <summary>
            获取文件或目录最后的写入UTC时间。
            </summary>
            <param name="virtualPathProvider">虚拟路径提供者。</param>
            <param name="virtualPath">虚拟路径。</param>
            <returns>UTC时间。</returns>
        </member>
        <member name="T:Rabbit.Kernel.ITransientDependency">
            <summary>
            表示实现者是一个瞬态依赖。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.IUnitOfWorkDependency">
            <summary>
            表示实现者是一个工作单元依赖。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.IKernelBuilder">
            <summary>
                一个抽象的内核建设者。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.IKernelBuilder.OnStarting(System.Action{Autofac.ContainerBuilder},System.String)">
            <summary>
                在启动前执行。
            </summary>
            <param name="action">动作。</param>
            <param name="actionName">动作名称，如果动作名称不为空并且存在相同的动作名称则用最后一个动作替换之前的动作。</param>
            <returns>内核建设者。</returns>
        </member>
        <member name="M:Rabbit.Kernel.IKernelBuilder.OnStarted(System.Action{Autofac.IContainer},System.String)">
            <summary>
                在启动完成之后执行。
            </summary>
            <param name="action">动作。</param>
            <param name="actionName">动作名称，如果动作名称不为空并且存在相同的动作名称则用最后一个动作替换之前的动作。</param>
            <returns>内核建设者。</returns>
        </member>
        <member name="M:Rabbit.Kernel.IKernelBuilder.Build">
            <summary>
                建造。
            </summary>
            <returns>容器。</returns>
        </member>
        <member name="T:Rabbit.Kernel.KernelBuilder">
            <summary>
                内核建设者。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.KernelBuilder.#ctor">
            <summary>
                初始化一个新的内核建设者。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.KernelBuilder.OnStarting(System.Action{Autofac.ContainerBuilder},System.String)">
            <summary>
                在启动前执行。
            </summary>
            <param name="action">动作。</param>
            <param name="actionName">动作名称，如果动作名称不为空并且存在相同的动作名称则用最后一个动作替换之前的动作。</param>
            <returns>内核建设者。</returns>
        </member>
        <member name="M:Rabbit.Kernel.KernelBuilder.OnStarted(System.Action{Autofac.IContainer},System.String)">
            <summary>
                在启动完成之后执行。
            </summary>
            <param name="action">动作。</param>
            <param name="actionName">动作名称，如果动作名称不为空并且存在相同的动作名称则用最后一个动作替换之前的动作。</param>
            <returns>内核建设者。</returns>
        </member>
        <member name="M:Rabbit.Kernel.KernelBuilder.Build">
            <summary>
                建造。
            </summary>
            <returns>容器。</returns>
        </member>
        <member name="T:Rabbit.Kernel.KernelBuilderExtensions">
            <summary>
                内核建设者扩展方法。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.KernelBuilderExtensions.RegisterExtension(Rabbit.Kernel.IKernelBuilder,System.Reflection.Assembly)">
            <summary>
                注册一个扩展。
            </summary>
            <param name="kernelBuilder">内核建设者。</param>
            <param name="assembly">扩展程序集。</param>
            <returns>内核建设者。</returns>
        </member>
        <member name="M:Rabbit.Kernel.KernelBuilderExtensions.RegisterExtension(Rabbit.Kernel.IKernelBuilder,System.Reflection.Assembly,System.Boolean)">
            <summary>
                注册一个扩展。
            </summary>
            <param name="kernelBuilder">内核建设者。</param>
            <param name="assembly">扩展程序集。</param>
            <param name="isMinimumShellDescriptor">是否迷你外壳描述符。</param>
            <returns>内核建设者。</returns>
        </member>
        <member name="M:Rabbit.Kernel.KernelBuilderExtensions.ExtensionFolders.AvailableExtensions">
            <summary>
                可用的扩展。
            </summary>
            <returns>扩展描述条目符集合。</returns>
        </member>
        <member name="M:Rabbit.Kernel.ExtensionMinimumShellDescriptorProvider.GetFeatures(System.Collections.Generic.ICollection{Rabbit.Kernel.Environment.Descriptor.Models.ShellFeature})">
            <summary>
            获取外壳描述符。
            </summary>
            <param name="features">外壳特性描述符。</param>
        </member>
        <member name="T:Rabbit.Kernel.KernelModule">
            <summary>
            内核模块。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.KernelModule.Load(Autofac.ContainerBuilder)">
            <summary>
            Override to add registrations to the container.
            </summary>
            <remarks>
            Note that the ContainerBuilder parameter is unique to this module.
            </remarks>
            <param name="builder">The builder through which components can be
                        registered.</param>
        </member>
        <member name="T:Rabbit.Kernel.Localization.IText">
            <summary>
            一个抽象的文本。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Localization.IText.Get(System.String,System.Object[])">
            <summary>
            获取本地化字符串。
            </summary>
            <param name="textHint">文本示意。</param>
            <param name="args">参数。</param>
            <returns>本地化字符串。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Localization.LocalizationModule.Load(Autofac.ContainerBuilder)">
            <summary>
            Override to add registrations to the container.
            </summary>
            <remarks>
            Note that the ContainerBuilder parameter is unique to this module.
            </remarks>
            <param name="builder">The builder through which components can be
                        registered.</param>
        </member>
        <member name="M:Rabbit.Kernel.Localization.LocalizationModule.AttachToComponentRegistration(Autofac.Core.IComponentRegistry,Autofac.Core.IComponentRegistration)">
            <summary>
            Override to attach module-specific functionality to a
                        component registration.
            </summary>
            <remarks>
            This method will be called for all existing <i>and future</i> component
                        registrations - ordering is not important.
            </remarks>
            <param name="componentRegistry">The component registry.</param><param name="registration">The registration to attach functionality to.</param>
        </member>
        <member name="T:Rabbit.Kernel.Localization.LocalizedString">
            <summary>
            本地化字符串。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Localization.LocalizedString.#ctor(System.String)">
            <summary>
            初始化一个新的本地化字符串。
            </summary>
            <param name="languageNeutral">通用语言。</param>
        </member>
        <member name="M:Rabbit.Kernel.Localization.LocalizedString.#ctor(System.String,System.String,System.String,System.Object[])">
            <summary>
            初始化一个新的本地化字符串。
            </summary>
            <param name="localized">本地化字符串。</param>
            <param name="scope">作用范围。</param>
            <param name="textHint">文本示意。</param>
            <param name="args">参数。</param>
        </member>
        <member name="M:Rabbit.Kernel.Localization.LocalizedString.TextOrDefault(System.String,Rabbit.Kernel.Localization.LocalizedString)">
            <summary>
            获取一个本地化字符串，如果不存在则返回 <paramref name="defaultValue"/>。
            </summary>
            <param name="text">问吧。</param>
            <param name="defaultValue">默认值。</param>
            <returns>本地化字符串。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Localization.LocalizedString.ToHtmlString">
            <summary>
            返回 HTML 编码的字符串。
            </summary>
            <returns>
            HTML 编码的字符串。
            </returns>
        </member>
        <member name="M:Rabbit.Kernel.Localization.LocalizedString.ToString">
            <summary>
            得到本地化字符串。
            </summary>
            <returns>本地化字符串。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Localization.LocalizedString.GetHashCode">
            <summary>
            用作特定类型的哈希函数。
            </summary>
            <returns>
            当前 <see cref="T:System.Object"/> 的哈希代码。
            </returns>
        </member>
        <member name="M:Rabbit.Kernel.Localization.LocalizedString.Equals(System.Object)">
            <summary>
            确定指定的 <see cref="T:System.Object"/> 是否等于当前的 <see cref="T:System.Object"/>。
            </summary>
            <returns>
            如果指定的 <see cref="T:System.Object"/> 等于当前的 <see cref="T:System.Object"/>，则为 true；否则为 false。
            </returns>
            <param name="obj">与当前的 <see cref="T:System.Object"/> 进行比较的 <see cref="T:System.Object"/>。</param>
        </member>
        <member name="P:Rabbit.Kernel.Localization.LocalizedString.Scope">
            <summary>
            本地化文本的作用范围。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Localization.LocalizedString.TextHint">
            <summary>
            文本示意。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Localization.LocalizedString.Args">
            <summary>
            参数。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Localization.LocalizedString.Text">
            <summary>
            本地化字符串。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Localization.Localizer">
            <summary>
            一个获取本地化字符串的委托。
            </summary>
            <param name="text">文本。</param>
            <param name="args">参数。</param>
        </member>
        <member name="T:Rabbit.Kernel.Localization.NullLocalizer">
            <summary>
            一个空的本地化实例。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Localization.NullLocalizer.Instance">
            <summary>
            本地化实例。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Localization.Services.ICultureManager">
            <summary>
            一个抽象的文化管理者。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Localization.Services.ICultureManager.GetCurrentCulture(Rabbit.Kernel.Works.WorkContext)">
            <summary>
            获取当前文化。
            </summary>
            <param name="workContext">工作上下文。</param>
            <returns>文化名称。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Localization.Services.ICultureManager.GetTenantCulture">
            <summary>
            获取租户文化。
            </summary>
            <returns>文化名称。</returns>
        </member>
        <member name="T:Rabbit.Kernel.Localization.Services.CultureSelectorResult">
            <summary>
            文化选择结果。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Localization.Services.CultureSelectorResult.Priority">
            <summary>
            优先级。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Localization.Services.CultureSelectorResult.CultureName">
            <summary>
            文化名称。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Localization.Services.ICultureSelector">
            <summary>
            一个抽象的文化选择器。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Localization.Services.ICultureSelector.GetCulture(Rabbit.Kernel.Works.WorkContext)">
            <summary>
            根据工作上下文获取文化。
            </summary>
            <param name="workContext">工作上下文。</param>
            <returns>文化选择结果。</returns>
        </member>
        <member name="T:Rabbit.Kernel.Localization.Services.ILocalizedStringManager">
            <summary>
            一个抽象的本地化字符串管理者。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Localization.Services.ILocalizedStringManager.GetLocalizedString(System.String,System.String,System.String)">
            <summary>
            获取本地化字符串。
            </summary>
            <param name="scope">作用范围。</param>
            <param name="text">文本。</param>
            <param name="cultureName">文化名称。</param>
            <returns>本地化字符串。</returns>
        </member>
        <member name="T:Rabbit.Kernel.Works.IWorkContextStateProvider">
            <summary>
            一个抽象的工作上下文状态提供者。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Works.IWorkContextStateProvider.Get``1(System.String)">
            <summary>
            获取状态信值。
            </summary>
            <typeparam name="T">状态类型。</typeparam>
            <param name="name">状态名称。</param>
            <returns>获取状态值的委托。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Localization.Services.Impl.CurrentCultureWorkContext.Get``1(System.String)">
            <summary>
            创建一个从一个工作上下文获取服务的委托。
            </summary>
            <typeparam name="T">服务类型。</typeparam>
            <param name="name">服务名称。</param>
            <returns>从一个工作上下文获取服务的委托。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Localization.Services.Impl.DefaultCultureManager.GetCurrentCulture(Rabbit.Kernel.Works.WorkContext)">
            <summary>
            获取当前文化。
            </summary>
            <param name="workContext">工作上下文。</param>
            <returns>文化名称。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Localization.Services.Impl.DefaultCultureManager.GetTenantCulture">
            <summary>
            获取租户文化。
            </summary>
            <returns>文化名称。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Localization.Services.Impl.DefaultLocalizedStringManager.GetLocalizedString(System.String,System.String,System.String)">
            <summary>
            获取本地化字符串。
            </summary>
            <param name="scope">作用范围。</param>
            <param name="text">文本。</param>
            <param name="cultureName">文化名称。</param>
            <returns>本地化字符串。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Localization.Services.Impl.TenantCultureSelector.GetCulture(Rabbit.Kernel.Works.WorkContext)">
            <summary>
            根据工作上下文获取文化。
            </summary>
            <param name="workContext">工作上下文。</param>
            <returns>文化选择结果。</returns>
        </member>
        <member name="T:Rabbit.Kernel.Logging.BuilderExtensions">
            <summary>
            日志建设者扩展。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Logging.BuilderExtensions.UseLogging(Rabbit.Kernel.IKernelBuilder,System.Action{Rabbit.Kernel.Logging.BuilderExtensions.ILoggingBuilder})">
            <summary>
            使用日志。
            </summary>
            <param name="kernelBuilder">内核建设者。</param>
            <param name="loggingBuilder">日志建设动作。</param>
        </member>
        <member name="T:Rabbit.Kernel.Logging.BuilderExtensions.ILoggingBuilder">
            <summary>
            一个抽象的日志组件建设者。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Logging.BuilderExtensions.ILoggingBuilder.KernelBuilder">
            <summary>
            内核建设者。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Logging.BuilderExtensions.LoggingBuilder.KernelBuilder">
            <summary>
            内核建设者。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Logging.LogLevel">
            <summary>
            日志等级。
            </summary>
        </member>
        <member name="F:Rabbit.Kernel.Logging.LogLevel.Trace">
            <summary>
            追踪。
            </summary>
        </member>
        <member name="F:Rabbit.Kernel.Logging.LogLevel.Debug">
            <summary>
            调试。
            </summary>
        </member>
        <member name="F:Rabbit.Kernel.Logging.LogLevel.Information">
            <summary>
            信息。
            </summary>
        </member>
        <member name="F:Rabbit.Kernel.Logging.LogLevel.Warning">
            <summary>
            警告。
            </summary>
        </member>
        <member name="F:Rabbit.Kernel.Logging.LogLevel.Error">
            <summary>
            错误。
            </summary>
        </member>
        <member name="F:Rabbit.Kernel.Logging.LogLevel.Fatal">
            <summary>
            致命错误。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Logging.ILogger">
            <summary>
            一个抽象的日志记录器接口。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Logging.ILogger.IsEnabled(Rabbit.Kernel.Logging.LogLevel)">
            <summary>
            判断日志记录器是否开启。
            </summary>
            <param name="level">日志等级。</param>
            <returns>如果开启返回true，否则返回false。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Logging.ILogger.Log(Rabbit.Kernel.Logging.LogLevel,System.Exception,System.String,System.Object[])">
            <summary>
            记录日志。
            </summary>
            <param name="level">日志等级。</param>
            <param name="exception">异常。</param>
            <param name="format">格式。</param>
            <param name="args">参数。</param>
        </member>
        <member name="T:Rabbit.Kernel.Logging.LoggingExtenions">
            <summary>
            日志记录器扩展方法。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Debug(Rabbit.Kernel.Logging.ILogger,System.String)">
            <summary>
            记录一个调试信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Information(Rabbit.Kernel.Logging.ILogger,System.String)">
            <summary>
            记录一个信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Warning(Rabbit.Kernel.Logging.ILogger,System.String)">
            <summary>
            记录一个警告信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Error(Rabbit.Kernel.Logging.ILogger,System.String)">
            <summary>
            记录一个错误信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Fatal(Rabbit.Kernel.Logging.ILogger,System.String)">
            <summary>
            记录一个致命的错误信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Debug(Rabbit.Kernel.Logging.ILogger,System.Exception,System.String)">
            <summary>
            记录一个调试信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="exception">异常。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Information(Rabbit.Kernel.Logging.ILogger,System.Exception,System.String)">
            <summary>
            记录一个信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="exception">异常。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Warning(Rabbit.Kernel.Logging.ILogger,System.Exception,System.String)">
            <summary>
            记录一个警告信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="exception">异常。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Error(Rabbit.Kernel.Logging.ILogger,System.Exception,System.String)">
            <summary>
            记录一个错误信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="exception">异常。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Fatal(Rabbit.Kernel.Logging.ILogger,System.Exception,System.String)">
            <summary>
            记录一个致命的错误信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="exception">异常。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Debug(Rabbit.Kernel.Logging.ILogger,System.Func{System.String})">
            <summary>
            记录一个调试信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Information(Rabbit.Kernel.Logging.ILogger,System.Func{System.String})">
            <summary>
            记录一个信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Warning(Rabbit.Kernel.Logging.ILogger,System.Func{System.String})">
            <summary>
            记录一个警告信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Error(Rabbit.Kernel.Logging.ILogger,System.Func{System.String})">
            <summary>
            记录一个错误信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Fatal(Rabbit.Kernel.Logging.ILogger,System.Func{System.String})">
            <summary>
            记录一个致命的错误信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Debug(Rabbit.Kernel.Logging.ILogger,System.Exception,System.Func{System.String})">
            <summary>
            记录一个调试信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="exception">异常。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Information(Rabbit.Kernel.Logging.ILogger,System.Exception,System.Func{System.String})">
            <summary>
            记录一个信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="exception">异常。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Warning(Rabbit.Kernel.Logging.ILogger,System.Exception,System.Func{System.String})">
            <summary>
            记录一个警告信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="exception">异常。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Error(Rabbit.Kernel.Logging.ILogger,System.Exception,System.Func{System.String})">
            <summary>
            记录一个错误信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="exception">异常。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Fatal(Rabbit.Kernel.Logging.ILogger,System.Exception,System.Func{System.String})">
            <summary>
            记录一个致命的错误信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="exception">异常。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Debug(Rabbit.Kernel.Logging.ILogger,System.Func{System.Exception},System.Func{System.String})">
            <summary>
            记录一个调试信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="exception">异常。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Information(Rabbit.Kernel.Logging.ILogger,System.Func{System.Exception},System.Func{System.String})">
            <summary>
            记录一个信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="exception">异常。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Warning(Rabbit.Kernel.Logging.ILogger,System.Func{System.Exception},System.Func{System.String})">
            <summary>
            记录一个警告信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="exception">异常。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Error(Rabbit.Kernel.Logging.ILogger,System.Func{System.Exception},System.Func{System.String})">
            <summary>
            记录一个错误信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="exception">异常。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Fatal(Rabbit.Kernel.Logging.ILogger,System.Func{System.Exception},System.Func{System.String})">
            <summary>
            记录一个致命的错误信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="exception">异常。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Debug(Rabbit.Kernel.Logging.ILogger,System.String,System.Object[])">
            <summary>
            记录一个调试信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="format">记录格式。</param>
            <param name="args">参数。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Information(Rabbit.Kernel.Logging.ILogger,System.String,System.Object[])">
            <summary>
            记录一个信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="format">记录格式。</param>
            <param name="args">参数。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Warning(Rabbit.Kernel.Logging.ILogger,System.String,System.Object[])">
            <summary>
            记录一个警告信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="format">记录格式。</param>
            <param name="args">参数。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Error(Rabbit.Kernel.Logging.ILogger,System.String,System.Object[])">
            <summary>
            记录一个错误信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="format">记录格式。</param>
            <param name="args">参数。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Fatal(Rabbit.Kernel.Logging.ILogger,System.String,System.Object[])">
            <summary>
            记录一个致命的错误信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="format">记录格式。</param>
            <param name="args">参数。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Debug(Rabbit.Kernel.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            记录一个调试信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="exception">异常。</param>
            <param name="format">记录格式。</param>
            <param name="args">参数。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Information(Rabbit.Kernel.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            记录一个信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="exception">异常。</param>
            <param name="format">记录格式。</param>
            <param name="args">参数。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Warning(Rabbit.Kernel.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            记录一个警告信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="exception">异常。</param>
            <param name="format">记录格式。</param>
            <param name="args">参数。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Error(Rabbit.Kernel.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            记录一个错误信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="exception">异常。</param>
            <param name="format">记录格式。</param>
            <param name="args">参数。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Fatal(Rabbit.Kernel.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            记录一个致命的错误信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="exception">异常。</param>
            <param name="format">记录格式。</param>
            <param name="args">参数。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Debug(Rabbit.Kernel.Logging.ILogger,Rabbit.Kernel.Localization.LocalizedString)">
            <summary>
            记录一个调试信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Information(Rabbit.Kernel.Logging.ILogger,Rabbit.Kernel.Localization.LocalizedString)">
            <summary>
            记录一个信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Warning(Rabbit.Kernel.Logging.ILogger,Rabbit.Kernel.Localization.LocalizedString)">
            <summary>
            记录一个警告信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Error(Rabbit.Kernel.Logging.ILogger,Rabbit.Kernel.Localization.LocalizedString)">
            <summary>
            记录一个错误信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Fatal(Rabbit.Kernel.Logging.ILogger,Rabbit.Kernel.Localization.LocalizedString)">
            <summary>
            记录一个致命的错误信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Debug(Rabbit.Kernel.Logging.ILogger,System.Exception,Rabbit.Kernel.Localization.LocalizedString)">
            <summary>
            记录一个调试信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="exception">异常。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Information(Rabbit.Kernel.Logging.ILogger,System.Exception,Rabbit.Kernel.Localization.LocalizedString)">
            <summary>
            记录一个信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="exception">异常。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Warning(Rabbit.Kernel.Logging.ILogger,System.Exception,Rabbit.Kernel.Localization.LocalizedString)">
            <summary>
            记录一个警告信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="exception">异常。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Error(Rabbit.Kernel.Logging.ILogger,System.Exception,Rabbit.Kernel.Localization.LocalizedString)">
            <summary>
            记录一个错误信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="exception">异常。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Fatal(Rabbit.Kernel.Logging.ILogger,System.Exception,Rabbit.Kernel.Localization.LocalizedString)">
            <summary>
            记录一个致命的错误信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="exception">异常。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Debug(Rabbit.Kernel.Logging.ILogger,Rabbit.Kernel.Localization.LocalizedString,System.Object[])">
            <summary>
            记录一个调试信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="format">记录格式。</param>
            <param name="args">参数。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Information(Rabbit.Kernel.Logging.ILogger,Rabbit.Kernel.Localization.LocalizedString,System.Object[])">
            <summary>
            记录一个信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="format">记录格式。</param>
            <param name="args">参数。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Warning(Rabbit.Kernel.Logging.ILogger,Rabbit.Kernel.Localization.LocalizedString,System.Object[])">
            <summary>
            记录一个警告信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="format">记录格式。</param>
            <param name="args">参数。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Error(Rabbit.Kernel.Logging.ILogger,Rabbit.Kernel.Localization.LocalizedString,System.Object[])">
            <summary>
            记录一个错误信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="format">记录格式。</param>
            <param name="args">参数。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Fatal(Rabbit.Kernel.Logging.ILogger,Rabbit.Kernel.Localization.LocalizedString,System.Object[])">
            <summary>
            记录一个致命的错误信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="format">记录格式。</param>
            <param name="args">参数。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Debug(Rabbit.Kernel.Logging.ILogger,System.Exception,Rabbit.Kernel.Localization.LocalizedString,System.Object[])">
            <summary>
            记录一个调试信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="exception">异常。</param>
            <param name="format">记录格式。</param>
            <param name="args">参数。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Information(Rabbit.Kernel.Logging.ILogger,System.Exception,Rabbit.Kernel.Localization.LocalizedString,System.Object[])">
            <summary>
            记录一个信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="exception">异常。</param>
            <param name="format">记录格式。</param>
            <param name="args">参数。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Warning(Rabbit.Kernel.Logging.ILogger,System.Exception,Rabbit.Kernel.Localization.LocalizedString,System.Object[])">
            <summary>
            记录一个警告信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="exception">异常。</param>
            <param name="format">记录格式。</param>
            <param name="args">参数。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Error(Rabbit.Kernel.Logging.ILogger,System.Exception,Rabbit.Kernel.Localization.LocalizedString,System.Object[])">
            <summary>
            记录一个错误信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="exception">异常。</param>
            <param name="format">记录格式。</param>
            <param name="args">参数。</param>
        </member>
        <member name="M:Rabbit.Kernel.Logging.LoggingExtenions.Fatal(Rabbit.Kernel.Logging.ILogger,System.Exception,Rabbit.Kernel.Localization.LocalizedString,System.Object[])">
            <summary>
            记录一个致命的错误信息。
            </summary>
            <param name="logger">日志记录器。</param>
            <param name="exception">异常。</param>
            <param name="format">记录格式。</param>
            <param name="args">参数。</param>
        </member>
        <member name="T:Rabbit.Kernel.Logging.NullLogger">
            <summary>
            一个空的日志记录器。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Logging.NullLogger.IsEnabled(Rabbit.Kernel.Logging.LogLevel)">
            <summary>
            判断日志记录器是否开启。
            </summary>
            <param name="level">日志等级。</param>
            <returns>如果开启返回true，否则返回false。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Logging.NullLogger.Log(Rabbit.Kernel.Logging.LogLevel,System.Exception,System.String,System.Object[])">
            <summary>
            记录日志。
            </summary>
            <param name="level">日志等级。</param>
            <param name="exception">异常。</param>
            <param name="format">格式。</param>
            <param name="args">参数。</param>
        </member>
        <member name="P:Rabbit.Kernel.Logging.NullLogger.Instance">
            <summary>
            记录器实例。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.RabbitException">
            <summary>
            Rabbit异常类。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.RabbitException.#ctor(Rabbit.Kernel.Localization.LocalizedString)">
            <summary>
            初始化一个新的Rabbit异常实例。
            </summary>
            <param name="message">异常消息。</param>
        </member>
        <member name="M:Rabbit.Kernel.RabbitException.#ctor(Rabbit.Kernel.Localization.LocalizedString,System.Exception)">
            <summary>
            初始化一个新的Rabbit异常实例。
            </summary>
            <param name="message">异常消息。</param>
            <param name="innerException">内部异常。</param>
        </member>
        <member name="M:Rabbit.Kernel.RabbitException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            初始化一个新的Rabbit异常实例。
            </summary>
            <param name="info">保存序列化对象数据的对象。</param>
            <param name="context">有关源或目标的上下文信息。</param>
        </member>
        <member name="M:Rabbit.Kernel.RabbitException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            当在派生类中重写时，用关于异常的信息设置 <see cref="T:System.Runtime.Serialization.SerializationInfo"/>。
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/>，它存有有关所引发异常的序列化的对象数据。</param><param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/>，它包含有关源或目标的上下文信息。</param><exception cref="T:System.ArgumentNullException"><paramref name="info"/> 参数是空引用（Visual Basic 中为 Nothing）。</exception><PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/></PermissionSet>
        </member>
        <member name="P:Rabbit.Kernel.RabbitException.LocalizedMessage">
            <summary>
            本地化异常消息。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Services.IClock">
            <summary>
            提供UTC时间支持。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Services.IClock.WhenUtc(System.DateTime)">
            <summary>
            根据绝对Utc时间隔获取一个挥发令牌。
            </summary>
            <param name="absoluteUtc">绝对的Utc时间。</param>
            <returns>挥发令牌实例。</returns>
        </member>
        <member name="P:Rabbit.Kernel.Services.IClock.UtcNow">
            <summary>
            从 <see cref="T:System.DateTime"/> 获取系统当前的Utc时间。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Services.ClockExtensions">
            <summary>
            时钟扩展方法。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Services.ClockExtensions.When(Rabbit.Kernel.Services.IClock,System.TimeSpan)">
            <summary>
            根据时间间隔获取一个挥发令牌。
            </summary>
            <param name="clock">时钟服务。</param>
            <param name="duration">时间间隔。</param>
            <returns>挥发令牌实例。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Services.Impl.DefaultClock.WhenUtc(System.DateTime)">
            <summary>
            根据绝对Utc时间隔获取一个挥发令牌。
            </summary>
            <param name="absoluteUtc">绝对的Utc时间。</param>
            <returns>挥发令牌实例。</returns>
        </member>
        <member name="P:Rabbit.Kernel.Services.Impl.DefaultClock.UtcNow">
            <summary>
            从 <see cref="T:System.DateTime"/> 获取系统当前的Utc时间。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Services.Impl.DefaultClock.AbsoluteExpirationToken.IsCurrent">
            <summary>
            标识缓存是否有效，true为有效，false为失效。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Settings.Impl.CurrentTenantWorkContext.Get``1(System.String)">
            <summary>
            创建一个从一个工作上下文获取服务的委托。
            </summary>
            <typeparam name="T">服务类型。</typeparam>
            <param name="name">服务名称。</param>
            <returns>从一个工作上下文获取服务的委托。</returns>
        </member>
        <member name="T:Rabbit.Kernel.Settings.ITenant">
            <summary>
            通过接口模式提供租户设置模型。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Settings.ITenant.TenantName">
            <summary>
            租户名称。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Settings.ITenant.SuperUser">
            <summary>
            超级用户。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Settings.ITenant.TenantCulture">
            <summary>
            租户文化。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Settings.ITenant.TenantTimeZone">
            <summary>
            租户时区。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Settings.ITenant.Item(System.String)">
            <summary>
            根据Key获取自定义参数。
            </summary>
            <param name="key">参数Key。</param>
            <returns>参数值。</returns>
            <exception cref="T:System.ArgumentNullException">参数 <paramref name="key"/> 为空。</exception>
        </member>
        <member name="P:Rabbit.Kernel.Settings.Impl.DefaultTenant.TenantName">
            <summary>
            租户名称。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Settings.Impl.DefaultTenant.SuperUser">
            <summary>
            超级用户。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Settings.Impl.DefaultTenant.TenantCulture">
            <summary>
            租户文化。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Settings.Impl.DefaultTenant.TenantTimeZone">
            <summary>
            租户时区。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Settings.Impl.DefaultTenant.Item(System.String)">
            <summary>
            根据Key获取自定义参数。
            </summary>
            <param name="key">参数Key。</param>
            <returns>参数值。</returns>
            <exception cref="T:System.ArgumentNullException">参数 <paramref name="key"/> 为空。</exception>
        </member>
        <member name="T:Rabbit.Kernel.Settings.ITenantService">
            <summary>
            一个抽象的租户服务。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Settings.ITenantService.GetTenantSettings">
            <summary>
            获取当前租户设置。
            </summary>
            <returns>当前租户设置实例。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Settings.Impl.DefaultTenantService.GetTenantSettings">
            <summary>
            获取当前租户设置。
            </summary>
            <returns>当前租户设置实例。</returns>
        </member>
        <member name="T:Rabbit.Kernel.Tasks.IBackgroundService">
            <summary>
            一个抽象的后台服务。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Tasks.IBackgroundService.Sweep">
            <summary>
            扫描。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Tasks.Impl.DefaultBackgroundService.Sweep">
            <summary>
            扫描。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Tasks.IBackgroundServiceEvents">
            <summary>
            一个抽象的后台服务事件。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Tasks.IBackgroundServiceEvents.Sweeping(Rabbit.Kernel.Tasks.IBackgroundTask)">
            <summary>
            开始扫描前执行。
            </summary>
            <param name="backgroundTask">后台任务实例。</param>
        </member>
        <member name="M:Rabbit.Kernel.Tasks.IBackgroundServiceEvents.OnException(Rabbit.Kernel.Tasks.IBackgroundTask,System.Exception)">
            <summary>
            在扫描过程中发生异常时执行。
            </summary>
            <param name="backgroundTask">后台任务实例。</param>
            <param name="exception">异常信息。</param>
        </member>
        <member name="M:Rabbit.Kernel.Tasks.IBackgroundServiceEvents.Sweeped(Rabbit.Kernel.Tasks.IBackgroundTask)">
            <summary>
            扫描结束时执行。
            </summary>
            <param name="backgroundTask">后台任务实例。</param>
        </member>
        <member name="T:Rabbit.Kernel.Tasks.IBackgroundTask">
            <summary>
            一个抽象的后台任务。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Tasks.IBackgroundTask.Sweep">
            <summary>
            扫描。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Tasks.ISweepGenerator">
            <summary>
            一个抽象的扫描发生器。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Tasks.ISweepGenerator.Activate">
            <summary>
            激活。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Tasks.ISweepGenerator.Terminate">
            <summary>
            终止。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Tasks.Impl.DefaultSweepGenerator.Activate">
            <summary>
            激活。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Tasks.Impl.DefaultSweepGenerator.Terminate">
            <summary>
            终止。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Tasks.Impl.DefaultSweepGenerator.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Tasks.Impl.DefaultSweepGenerator.InternalTimer.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Utility.DependencyOrdering">
            <summary>
            依赖项排序。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Utility.DependencyOrdering.OrderByDependenciesAndPriorities``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean},System.Func{``0,System.Int32})">
            <summary>
            排序元素的集合“依赖顺序”。通过传递一个lambda确定如果一个元素是一个依赖另一个，
            此算法将返回的元素的排序条件，以便一个给定的序列中的元素不依赖于任何其他元素序列中进一步收集。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Utility.Extensions.InvokeExtensions">
            <summary>
            调用扩展方法。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Utility.Extensions.InvokeExtensions.Invoke``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},Rabbit.Kernel.Logging.ILogger)">
            <summary>
            调度一个集合内的所有实例的某个方法。
            </summary>
            <typeparam name="TEvents">事件类型。</typeparam>
            <param name="events">事件集合。</param>
            <param name="dispatch">调度动作。</param>
            <param name="logger">日志记录器。</param>
        </member>
        <member name="M:Rabbit.Kernel.Utility.Extensions.InvokeExtensions.Invoke``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},Rabbit.Kernel.Logging.ILogger)">
            <summary>
            调度一个集合内的所有实例的某个方法并返回一个值。
            </summary>
            <typeparam name="TEvents">事件类型。</typeparam>
            <typeparam name="TResult">返回结果类型。</typeparam>
            <param name="events">事件集合。</param>
            <param name="dispatch">调度动作。</param>
            <param name="logger">日志记录器。</param>
            <returns>结果集合。</returns>
        </member>
        <member name="T:Rabbit.Kernel.Utility.Extensions.ObjectExtensions">
            <summary>
            对象扩展方法。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Utility.Extensions.ObjectExtensions.NotNull``1(``0,System.String)">
            <summary>
            不允许为Null。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="instance">对象实例。</param>
            <param name="name">参数名称。</param>
            <returns>对象实例。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> 为null。</exception>
        </member>
        <member name="M:Rabbit.Kernel.Utility.Extensions.ObjectExtensions.NotEmpty(System.String,System.String)">
            <summary>
            不允许空字符串。
            </summary>
            <param name="str">字符串。</param>
            <param name="name">参数名称。</param>
            <returns>字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="str"/> 为空。</exception>
        </member>
        <member name="M:Rabbit.Kernel.Utility.Extensions.ObjectExtensions.NotEmptyOrWhiteSpace(System.String,System.String)">
            <summary>
            不允许空和只包含空格的字符串。
            </summary>
            <param name="str">字符串。</param>
            <param name="name">参数名称。</param>
            <returns>字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="str"/> 为空或者全为空格。</exception>
        </member>
        <member name="T:Rabbit.Kernel.Utility.Extensions.StringExtensions">
            <summary>
            字符串扩展方法。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Utility.Extensions.StringExtensions.CamelFriendly(System.String)">
            <summary>
            将字符串进行骆驼命名。
            </summary>
            <param name="camel">需要进行骆驼命名的字符串。</param>
            <returns>经过骆驼命名后的字符串。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Utility.Extensions.StringExtensions.IsLetter(System.Char)">
            <summary>
            检查字符串是否是A~Z或者是a~z中的任意一个字符。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Utility.Hash.ToString">
            <summary>
            返回表示当前 <see cref="T:System.Object"/> 的 <see cref="T:System.String"/>。
            </summary>
            <returns>
            <see cref="T:System.String"/>，表示当前的 <see cref="T:System.Object"/>。
            </returns>
        </member>
        <member name="M:Rabbit.Kernel.Utility.PersistenceList`1.GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举器。
            </summary>
            <returns>
            可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1"/>。
            </returns>
        </member>
        <member name="M:Rabbit.Kernel.Utility.PersistenceList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举器。
            </summary>
            <returns>
            可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator"/> 对象。
            </returns>
        </member>
        <member name="M:Rabbit.Kernel.Utility.PersistenceList`1.Add(`0)">
            <summary>
            将某项添加到 <see cref="T:System.Collections.Generic.ICollection`1"/> 中。
            </summary>
            <param name="item">要添加到 <see cref="T:System.Collections.Generic.ICollection`1"/> 的对象。</param><exception cref="T:System.NotSupportedException"><see cref="T:System.Collections.Generic.ICollection`1"/> 是只读的。</exception>
        </member>
        <member name="M:Rabbit.Kernel.Utility.PersistenceList`1.Clear">
            <summary>
            从 <see cref="T:System.Collections.Generic.ICollection`1"/> 中移除所有项。
            </summary>
            <exception cref="T:System.NotSupportedException"><see cref="T:System.Collections.Generic.ICollection`1"/> 是只读的。</exception>
        </member>
        <member name="M:Rabbit.Kernel.Utility.PersistenceList`1.Contains(`0)">
            <summary>
            确定 <see cref="T:System.Collections.Generic.ICollection`1"/> 是否包含特定值。
            </summary>
            <returns>
            如果在 <see cref="T:System.Collections.Generic.ICollection`1"/> 中找到 <paramref name="item"/>，则为 true；否则为 false。
            </returns>
            <param name="item">要在 <see cref="T:System.Collections.Generic.ICollection`1"/> 中定位的对象。</param>
        </member>
        <member name="M:Rabbit.Kernel.Utility.PersistenceList`1.CopyTo(`0[],System.Int32)">
            <summary>
            从特定的 <see cref="T:System.Array"/> 索引处开始，将 <see cref="T:System.Collections.Generic.ICollection`1"/> 的元素复制到一个 <see cref="T:System.Array"/> 中。
            </summary>
            <param name="array">作为从 <see cref="T:System.Collections.Generic.ICollection`1"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param><param name="arrayIndex"><paramref name="array"/> 中从零开始的索引，将在此处开始复制。</param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> 为 null。</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> 小于 0。</exception><exception cref="T:System.ArgumentException"><paramref name="array"/> 是多维数组。- 或 -源 <see cref="T:System.Collections.Generic.ICollection`1"/> 中的元素数大于从 <paramref name="arrayIndex"/> 到目标 <paramref name="array"/> 结尾处之间的可用空间。- 或 -无法自动将类型 <see name="T"/> 强制转换为目标 <paramref name="array"/> 的类型。</exception>
        </member>
        <member name="M:Rabbit.Kernel.Utility.PersistenceList`1.Remove(`0)">
            <summary>
            从 <see cref="T:System.Collections.Generic.ICollection`1"/> 中移除特定对象的第一个匹配项。
            </summary>
            <returns>
            如果已从 <see cref="T:System.Collections.Generic.ICollection`1"/> 中成功移除 <paramref name="item"/>，则为 true；否则为 false。如果在原始 <see cref="T:System.Collections.Generic.ICollection`1"/> 中没有找到 <paramref name="item"/>，该方法也会返回 false。
            </returns>
            <param name="item">要从 <see cref="T:System.Collections.Generic.ICollection`1"/> 中移除的对象。</param><exception cref="T:System.NotSupportedException"><see cref="T:System.Collections.Generic.ICollection`1"/> 是只读的。</exception>
        </member>
        <member name="P:Rabbit.Kernel.Utility.PersistenceList`1.Count">
            <summary>
            获取 <see cref="T:System.Collections.Generic.ICollection`1"/> 中包含的元素数。
            </summary>
            <returns>
            <see cref="T:System.Collections.Generic.ICollection`1"/> 中包含的元素数。
            </returns>
        </member>
        <member name="P:Rabbit.Kernel.Utility.PersistenceList`1.IsReadOnly">
            <summary>
            获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1"/> 是否为只读。
            </summary>
            <returns>
            如果 <see cref="T:System.Collections.Generic.ICollection`1"/> 为只读，则为 true；否则为 false。
            </returns>
        </member>
        <member name="T:Rabbit.Kernel.VersionRange">
            <summary>
            版本范围。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.VersionRange.#ctor(System.Version,System.Version)">
            <summary>
            初始化一个版本范围。
            </summary>
            <param name="minVersion">最小版本。</param>
            <param name="maxVersion">最大版本。</param>
        </member>
        <member name="M:Rabbit.Kernel.VersionRange.IsInRange(System.Version)">
            <summary>
            比较版本是否在版本范围之内。
            </summary>
            <param name="version">需要比较的版本。</param>
            <returns>如果在版本范围之内则返回true，否则返回false。</returns>
        </member>
        <member name="M:Rabbit.Kernel.VersionRange.ToString">
            <summary>
            返回格式为：{0}-{1}的版本范围字符串，如果最大和最小版本都为null则返回空字符串，如果最大或者最小版本只有一个为null则返回单个版本字符串。
            </summary>
            <returns>
            版本字符串信息。
            </returns>
        </member>
        <member name="M:Rabbit.Kernel.VersionRange.ToString(System.String)">
            <summary>
            返回格式为：<paramref name="format"/> 的版本范围字符串，如果最大和最小版本都为null则返回空字符串，如果最大或者最小版本只有一个为null则返回单个版本字符串。
            </summary>
            <param name="format">格式。</param>
            <returns>指定格式的版本字符串信息。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="format"/> 为空。</exception>
        </member>
        <member name="P:Rabbit.Kernel.VersionRange.MinVersion">
            <summary>
            最小版本。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.VersionRange.MaxVersion">
            <summary>
            最大版本。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.WorkContextExtensions">
            <summary>
            工作上下文扩展方法。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.WorkContextExtensions.CreateWorkContextScope(Autofac.ILifetimeScope)">
            <summary>
            创建一个工作上下文范围。
            </summary>
            <param name="lifetimeScope">容器。</param>
            <returns>工作上下文范围。</returns>
        </member>
        <member name="T:Rabbit.Kernel.Works.IWorkContextAccessor">
            <summary>
            一个抽象的工作上下文访问器。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Works.IWorkContextAccessor.GetContext">
            <summary>
            获取工作上下文。
            </summary>
            <returns>工作上下文。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Works.IWorkContextAccessor.CreateWorkContextScope">
            <summary>
            创建一个工作上下文范围。
            </summary>
            <returns>工作上下文范围。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Works.Impl.DefaultWorkContextAccessor.GetContext">
            <summary>
            获取工作上下文。
            </summary>
            <returns>工作上下文。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Works.Impl.DefaultWorkContextAccessor.CreateWorkContextScope">
            <summary>
            创建一个工作上下文范围。
            </summary>
            <returns>工作上下文范围。</returns>
        </member>
        <member name="T:Rabbit.Kernel.Works.IWorkContextScope">
            <summary>
            一个抽象的工作上下文范围。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Works.IWorkContextScope.Resolve``1">
            <summary>
            解析一个服务。
            </summary>
            <typeparam name="TService">服务类型。</typeparam>
            <returns>服务实例。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Works.IWorkContextScope.TryResolve``1(``0@)">
            <summary>
            尝试解析一个服务。
            </summary>
            <typeparam name="TService">服务类型。</typeparam>
            <param name="service">服务实例。</param>
            <returns>如果解析成功则返回true，否则返回false。</returns>
        </member>
        <member name="P:Rabbit.Kernel.Works.IWorkContextScope.WorkContext">
            <summary>
            工作上下文。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Works.Impl.DefaultWorkContextAccessor.ThreadStaticScopeImplementation.Resolve``1">
            <summary>
            解析一个服务。
            </summary>
            <typeparam name="TService">服务类型。</typeparam>
            <returns>服务实例。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Works.Impl.DefaultWorkContextAccessor.ThreadStaticScopeImplementation.TryResolve``1(``0@)">
            <summary>
            尝试解析一个服务。
            </summary>
            <typeparam name="TService">服务类型。</typeparam>
            <param name="service">服务实例。</param>
            <returns>如果解析成功则返回true，否则返回false。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Works.Impl.DefaultWorkContextAccessor.ThreadStaticScopeImplementation.System#IDisposable#Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Works.Impl.DefaultWorkContextAccessor.ThreadStaticScopeImplementation.WorkContext">
            <summary>
            工作上下文。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Works.WorkContext">
            <summary>
            一个抽象的工作上下文。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Works.WorkContext.Resolve``1">
            <summary>
            解析一个服务。
            </summary>
            <typeparam name="T">服务类型。</typeparam>
            <returns>服务实例。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Works.WorkContext.TryResolve``1(``0@)">
            <summary>
            尝试解析一个服务。
            </summary>
            <typeparam name="T">服务类型。</typeparam>
            <param name="service">服务实例。</param>
            <returns>如果解析成功则返回true，否则返回false。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Works.WorkContext.GetState``1(System.String)">
            <summary>
            获取一个状态。
            </summary>
            <typeparam name="T">状态类型。</typeparam>
            <param name="name">状态名称。</param>
            <returns>状态实例。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Works.WorkContext.SetState``1(System.String,``0)">
            <summary>
            设置一个状态。
            </summary>
            <typeparam name="T">状态类型。</typeparam>
            <param name="name">状态名称。</param>
            <param name="value">状态值。</param>
        </member>
        <member name="P:Rabbit.Kernel.Works.WorkContext.CurrentCulture">
            <summary>
            工作上下文的文化。
            </summary>
        </member>
        <member name="P:Rabbit.Kernel.Works.WorkContext.CurrentTenant">
            <summary>
            该租户设置相关的内容。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Works.Impl.WorkContextImplementation.Resolve``1">
            <summary>
            解析一个服务。
            </summary>
            <typeparam name="T">服务类型。</typeparam>
            <returns>服务实例。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Works.Impl.WorkContextImplementation.TryResolve``1(``0@)">
            <summary>
            尝试解析一个服务。
            </summary>
            <typeparam name="T">服务类型。</typeparam>
            <param name="service">服务实例。</param>
            <returns>如果解析成功则返回true，否则返回false。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Works.Impl.WorkContextImplementation.GetState``1(System.String)">
            <summary>
            获取一个状态。
            </summary>
            <typeparam name="T">状态类型。</typeparam>
            <param name="name">状态名称。</param>
            <returns>状态实例。</returns>
        </member>
        <member name="M:Rabbit.Kernel.Works.Impl.WorkContextImplementation.SetState``1(System.String,``0)">
            <summary>
            设置一个状态。
            </summary>
            <typeparam name="T">状态类型。</typeparam>
            <param name="name">状态名称。</param>
            <param name="value">状态值。</param>
        </member>
        <member name="T:Rabbit.Kernel.Works.IWorkContextEvents">
            <summary>
            一个抽象的工作上下文事件。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Works.IWorkContextEvents.Started">
            <summary>
            工作上下文启动之后执行。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Works.IWorkContextEvents.Finished">
            <summary>
            工作上下文完成之后执行。
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Works.Work`1">
            <summary>
            工作实例代理。
            </summary>
            <typeparam name="T">实例类型。</typeparam>
        </member>
        <member name="M:Rabbit.Kernel.Works.Work`1.#ctor(System.Func{Rabbit.Kernel.Works.Work{`0},`0})">
            <summary>
            初始化一个新的工作实例代理。
            </summary>
            <param name="resolve">解析器。</param>
        </member>
        <member name="P:Rabbit.Kernel.Works.Work`1.Value">
            <summary>
            实例值。
            </summary>
        </member>
        <member name="M:Rabbit.Kernel.Works.WorkContextModule.Load(Autofac.ContainerBuilder)">
            <summary>
            Override to add registrations to the container.
            </summary>
            <remarks>
            Note that the ContainerBuilder parameter is unique to this module.
            </remarks>
            <param name="builder">The builder through which components can be
                        registered.</param>
        </member>
        <member name="M:Rabbit.Kernel.Works.WorkContextModule.WorkRegistrationSource.RegistrationsFor(Autofac.Core.Service,System.Func{Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.IComponentRegistration}})">
            <summary>
            Retrieve registrations for an unregistered service, to be used
                        by the container.
            </summary>
            <param name="service">The service that was requested.</param><param name="registrationAccessor">A function that will return existing registrations for a service.</param>
            <returns>
            Registrations providing the service.
            </returns>
            <remarks>
            If the source is queried for service s, and it returns a component that implements both s and s', then it
                        will not be queried again for either s or s'. This means that if the source can return other implementations
                        of s', it should return these, plus the transitive closure of other components implementing their
                        additional services, along with the implementation of s. It is not an error to return components
                        that do not implement <paramref name="service"/>.
            </remarks>
        </member>
        <member name="P:Rabbit.Kernel.Works.WorkContextModule.WorkRegistrationSource.IsAdapterForIndividualComponents">
            <summary>
            Gets whether the registrations provided by this source are 1:1 adapters on top
                        of other components (I.e. like Meta, Func or Owned.)
            </summary>
        </member>
        <member name="T:Rabbit.Kernel.Works.WorkContextProperty`1">
            <summary>
            工作上下文属性。
            </summary>
            <typeparam name="T">属性类型。</typeparam>
        </member>
        <member name="P:Rabbit.Kernel.Works.WorkContextProperty`1.Value">
            <summary>
            属性值。
            </summary>
        </member>
    </members>
</doc>
