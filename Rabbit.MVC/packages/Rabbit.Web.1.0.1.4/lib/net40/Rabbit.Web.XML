<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rabbit.Web</name>
    </assembly>
    <members>
        <member name="T:Rabbit.Web.BuilderExtensions">
            <summary>
                建设者扩展方法。
            </summary>
        </member>
        <member name="M:Rabbit.Web.BuilderExtensions.UseWeb(Rabbit.Kernel.IKernelBuilder,System.Action{Rabbit.Web.BuilderExtensions.IWebBuilder},System.Web.Routing.RouteCollection)">
            <summary>
                使用Web。
            </summary>
            <param name="kernelBuilder">内核建设者。</param>
            <param name="webBuilder">Web建设动作。</param>
            <param name="routes">路由集合，如果为 null 则默认为 RouteTable.Routes。</param>
        </member>
        <member name="T:Rabbit.Web.BuilderExtensions.IWebBuilder">
            <summary>
                一个抽象的Web建设者。
            </summary>
        </member>
        <member name="P:Rabbit.Web.BuilderExtensions.IWebBuilder.KernelBuilder">
            <summary>
                内核建设者。
            </summary>
        </member>
        <member name="T:Rabbit.Web.Environment.Extensions.ShellSettingsExtensions">
            <summary>
            外壳设置扩展方法。
            </summary>
        </member>
        <member name="M:Rabbit.Web.Environment.Extensions.ShellSettingsExtensions.GetRequestUrlPrefix(Rabbit.Kernel.Environment.Configuration.ShellSettings)">
            <summary>
            获取请求Url前缀。
            </summary>
            <param name="settings">外壳设置。</param>
            <returns>请求Url前缀。</returns>
        </member>
        <member name="M:Rabbit.Web.Environment.Extensions.ShellSettingsExtensions.GetRequestUrlHost(Rabbit.Kernel.Environment.Configuration.ShellSettings)">
            <summary>
            获取请求Url主机名称。
            </summary>
            <param name="settings">外壳设置。</param>
            <returns>请求Url主机名称。</returns>
        </member>
        <member name="M:Rabbit.Web.Environment.Extensions.ShellSettingsExtensions.SetRequestUrlHost(Rabbit.Kernel.Environment.Configuration.ShellSettings,System.String)">
            <summary>
            设置请求Url主机名称。
            </summary>
            <param name="settings">外壳设置。</param>
            <param name="host">主机名称。</param>
        </member>
        <member name="T:Rabbit.Web.Environment.IWebHost">
            <summary>
            一个抽象的Web主机。
            </summary>
        </member>
        <member name="M:Rabbit.Web.Environment.IWebHost.BeginRequest">
            <summary>
            请求开始时执行。
            </summary>
        </member>
        <member name="M:Rabbit.Web.Environment.IWebHost.EndRequest">
            <summary>
            请求结束时候执行。
            </summary>
        </member>
        <member name="M:Rabbit.Web.Environment.Impl.WebHost.Rabbit#Kernel#Environment#IHost#Initialize">
            <summary>
            初始化。
            </summary>
        </member>
        <member name="M:Rabbit.Web.Environment.Impl.WebHost.Rabbit#Kernel#Environment#IHost#ReloadExtensions">
            <summary>
            重新加载扩展。
            </summary>
        </member>
        <member name="M:Rabbit.Web.Environment.Impl.WebHost.GetShellContext(Rabbit.Kernel.Environment.Configuration.ShellSettings)">
            <summary>
            获取一个外壳上下文。
            </summary>
            <param name="shellSettings">外壳设置。</param>
            <returns>外壳上下文。</returns>
        </member>
        <member name="M:Rabbit.Web.Environment.Impl.WebHost.Rabbit#Kernel#Environment#Configuration#IShellSettingsManagerEventHandler#Saved(Rabbit.Kernel.Environment.Configuration.ShellSettings)">
            <summary>
            外壳设置保存成功之后。
            </summary>
            <param name="settings">外壳设置信息。</param>
        </member>
        <member name="M:Rabbit.Web.Environment.Impl.WebHost.Rabbit#Kernel#Environment#Descriptor#IShellDescriptorManagerEventHandler#Changed(Rabbit.Kernel.Environment.Descriptor.Models.ShellDescriptor,System.String)">
            <summary>
            当外壳描述符发生变更时执行。
            </summary>
            <param name="descriptor">新的外壳描述符。</param>
            <param name="tenant">租户名称。</param>
        </member>
        <member name="M:Rabbit.Web.Environment.Impl.WebHost.Rabbit#Web#Environment#IWebHost#BeginRequest">
            <summary>
            请求开始时执行。
            </summary>
        </member>
        <member name="M:Rabbit.Web.Environment.Impl.WebHost.Rabbit#Web#Environment#IWebHost#EndRequest">
            <summary>
            请求结束时候执行。
            </summary>
        </member>
        <member name="M:Rabbit.Web.Environment.Impl.WebHost.Rabbit#Kernel#Environment#IHost#CreateStandaloneEnvironment(Rabbit.Kernel.Environment.Configuration.ShellSettings)">
            <summary>
            创建一个独立的环境。
            </summary>
            <param name="shellSettings">外壳设置。</param>
            <returns>工作上下文范围。</returns>
        </member>
        <member name="T:Rabbit.Web.IHasRequestContext">
            <summary>
            表示含有一个请求上下文的抽象接口。
            </summary>
        </member>
        <member name="P:Rabbit.Web.IHasRequestContext.RequestContext">
            <summary>
            请求上下文。
            </summary>
        </member>
        <member name="T:Rabbit.Web.IHttpContextAccessor">
            <summary>
            一个抽象的Http上下文访问器。
            </summary>
        </member>
        <member name="M:Rabbit.Web.IHttpContextAccessor.Current">
            <summary>
            当前Http上下文。
            </summary>
            <returns>Http上下文。</returns>
        </member>
        <member name="M:Rabbit.Web.IHttpContextAccessor.Set(System.Web.HttpContextBase)">
            <summary>
            设置Http上下文。
            </summary>
            <param name="stub">存根。</param>
        </member>
        <member name="M:Rabbit.Web.Impl.DefaultHttpContextAccessor.Current">
            <summary>
            当前Http上下文。
            </summary>
            <returns>Http上下文。</returns>
        </member>
        <member name="M:Rabbit.Web.Impl.DefaultHttpContextAccessor.Set(System.Web.HttpContextBase)">
            <summary>
            设置Http上下文。
            </summary>
            <param name="stub">存根。</param>
        </member>
        <member name="M:Rabbit.Web.Impl.HttpContextWorkContext.Get``1(System.String)">
            <summary>
            获取状态信值。
            </summary>
            <typeparam name="T">状态类型。</typeparam>
            <param name="name">状态名称。</param>
            <returns>获取状态值的委托。</returns>
        </member>
        <member name="T:Rabbit.Web.RouteExtension">
            <summary>
            路由扩展方法。
            </summary>
        </member>
        <member name="M:Rabbit.Web.RouteExtension.GetAreaName(System.Web.Routing.RouteBase)">
            <summary>
            获取区域名称。
            </summary>
            <param name="route">路由信息。</param>
            <returns>区域名称。</returns>
        </member>
        <member name="M:Rabbit.Web.RouteExtension.GetAreaName(System.Web.Routing.RouteData)">
            <summary>
            获取区域名称。
            </summary>
            <param name="routeData">路由数据。</param>
            <returns>区域名称。</returns>
        </member>
        <member name="M:Rabbit.Web.RouteExtension.MapRabbitRoute``1(System.Collections.Generic.ICollection{Rabbit.Web.Routes.RouteDescriptor},System.String,System.String,System.Object,System.Object,System.Object)">
            <summary>
            映射指定的 URL 路由同时指定 <typeparamref name="TController"/> 类型的程序集短名称作为区域并设置默认的路由值、约束和命名空间。
            </summary>
            <typeparam name="TController">控制器类型。</typeparam>
            <param name="routes">应用程序的路由的集合。</param>
            <param name="url">路由的 URL 模式。</param>
            <param name="action">动作。</param>
            <param name="defaults">一个包含默认路由值的对象。</param>
            <param name="constraints">一组表达式，用于指定 url 参数的值。。</param>
            <param name="dataTokens">传递到路由处理程序但未用于确定该路由是否匹配特定 URL 模式的自定义值。这些值会传递到路由处理程序，以便用于处理请求。</param>
            <returns>对映射路由的引用。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="routes"/> 或 <paramref name="url"/> 参数为 null。</exception>
        </member>
        <member name="M:Rabbit.Web.RouteExtension.MapRabbitRoute``1(System.Collections.Generic.ICollection{Rabbit.Web.Routes.RouteDescriptor},System.String,System.String,System.String,System.Object,System.Object,System.Object)">
            <summary>
            映射指定的 URL 路由同时指定 <typeparamref name="TController"/> 类型的程序集短名称作为区域并设置默认的路由值、约束和命名空间。
            </summary>
            <typeparam name="TController">控制器类型。</typeparam>
            <param name="routes">应用程序的路由的集合。</param>
            <param name="name">要映射的路由的名称。</param>
            <param name="url">路由的 URL 模式。</param>
            <param name="action">动作。</param>
            <param name="defaults">一个包含默认路由值的对象。</param>
            <param name="constraints">一组表达式，用于指定 url 参数的值。。</param>
            <param name="dataTokens">传递到路由处理程序但未用于确定该路由是否匹配特定 URL 模式的自定义值。这些值会传递到路由处理程序，以便用于处理请求。</param>
            <returns>对映射路由的引用。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="routes"/> 或 <paramref name="url"/> 参数为 null。</exception>
        </member>
        <member name="M:Rabbit.Web.RouteExtension.MapRabbitRoute(System.Collections.Generic.ICollection{Rabbit.Web.Routes.RouteDescriptor},System.String,System.String,System.String,System.String,System.Object,System.Object,System.Object)">
            <summary>
            映射指定的 URL 路由并设置默认的路由值、约束和命名空间。
            </summary>
            <param name="routes">应用程序的路由的集合。</param>
            <param name="url">路由的 URL 模式。</param>
            <param name="area">区域。</param>
            <param name="controller">控制器名称。</param>
            <param name="action">动作。</param>
            <param name="defaults">一个包含默认路由值的对象。</param>
            <param name="constraints">一组表达式，用于指定 url 参数的值。。</param>
            <param name="dataTokens">传递到路由处理程序但未用于确定该路由是否匹配特定 URL 模式的自定义值。这些值会传递到路由处理程序，以便用于处理请求。</param>
            <returns>对映射路由的引用。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="routes"/> 或 <paramref name="url"/> 参数为 null。</exception>
        </member>
        <member name="M:Rabbit.Web.RouteExtension.MapRabbitRoute(System.Collections.Generic.ICollection{Rabbit.Web.Routes.RouteDescriptor},System.String,System.String,System.String,System.String,System.String,System.Object,System.Object,System.Object)">
            <summary>
            映射指定的 URL 路由并设置默认的路由值、约束和命名空间。
            </summary>
            <param name="routes">应用程序的路由的集合。</param>
            <param name="name">要映射的路由的名称。</param>
            <param name="url">路由的 URL 模式。</param>
            <param name="area">区域。</param>
            <param name="controller">控制器名称。</param>
            <param name="action">动作。</param>
            <param name="defaults">一个包含默认路由值的对象。</param>
            <param name="constraints">一组表达式，用于指定 url 参数的值。。</param>
            <param name="dataTokens">传递到路由处理程序但未用于确定该路由是否匹配特定 URL 模式的自定义值。这些值会传递到路由处理程序，以便用于处理请求。</param>
            <returns>对映射路由的引用。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="routes"/> 或 <paramref name="url"/> 参数为 null。</exception>
        </member>
        <member name="M:Rabbit.Web.RouteExtension.MapRabbitRoute(System.Collections.Generic.ICollection{Rabbit.Web.Routes.RouteDescriptor},System.String,System.String,System.Object,System.Object,System.Object)">
            <summary>
            映射指定的 URL 路由并设置默认的路由值、约束和命名空间。
            </summary>
            <param name="routes">应用程序的路由的集合。</param>
            <param name="url">路由的 URL 模式。</param>
            <param name="area">区域。</param>
            <param name="defaults">一个包含默认路由值的对象。</param>
            <param name="constraints">一组表达式，用于指定 url 参数的值。。</param>
            <param name="dataTokens">传递到路由处理程序但未用于确定该路由是否匹配特定 URL 模式的自定义值。这些值会传递到路由处理程序，以便用于处理请求。</param>
            <returns>对映射路由的引用。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="routes"/> 或 <paramref name="url"/> 参数为 null。</exception>
        </member>
        <member name="M:Rabbit.Web.RouteExtension.MapRabbitRoute(System.Collections.Generic.ICollection{Rabbit.Web.Routes.RouteDescriptor},System.String,System.String,System.String,System.Object,System.Object,System.Object)">
            <summary>
            映射指定的 URL 路由并设置默认的路由值、约束和命名空间。
            </summary>
            <param name="routes">应用程序的路由的集合。</param>
            <param name="name">要映射的路由的名称。</param>
            <param name="url">路由的 URL 模式。</param>
            <param name="area">区域。</param>
            <param name="defaults">一个包含默认路由值的对象。</param>
            <param name="constraints">一组表达式，用于指定 url 参数的值。。</param>
            <param name="dataTokens">传递到路由处理程序但未用于确定该路由是否匹配特定 URL 模式的自定义值。这些值会传递到路由处理程序，以便用于处理请求。</param>
            <returns>对映射路由的引用。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="routes"/> 或 <paramref name="url"/> 参数为 null。</exception>
        </member>
        <member name="M:Rabbit.Web.RouteExtension.MapRoute(System.Web.Routing.RouteCollection,System.String,System.Object,System.Object,System.Object)">
            <summary>
            映射指定的 URL 路由并设置默认的路由值、约束和命名空间。
            </summary>
            <param name="routes">应用程序的路由的集合。</param>
            <param name="url">路由的 URL 模式。</param>
            <param name="defaults">一个包含默认路由值的对象。</param>
            <param name="constraints">一组表达式，用于指定 url 参数的值。。</param>
            <param name="dataTokens">传递到路由处理程序但未用于确定该路由是否匹配特定 URL 模式的自定义值。这些值会传递到路由处理程序，以便用于处理请求。</param>
            <returns>对映射路由的引用。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="routes"/> 或 <paramref name="url"/> 参数为 null。</exception>
        </member>
        <member name="M:Rabbit.Web.RouteExtension.MapRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object,System.Object,System.Object)">
            <summary>
            映射指定的 URL 路由并设置默认的路由值、约束和命名空间。
            </summary>
            <param name="routes">应用程序的路由的集合。</param>
            <param name="name">要映射的路由的名称。</param>
            <param name="url">路由的 URL 模式。</param>
            <param name="defaults">一个包含默认路由值的对象。</param>
            <param name="constraints">一组表达式，用于指定 url 参数的值。。</param>
            <param name="dataTokens">传递到路由处理程序但未用于确定该路由是否匹配特定 URL 模式的自定义值。这些值会传递到路由处理程序，以便用于处理请求。</param>
            <returns>对映射路由的引用。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="routes"/> 或 <paramref name="url"/> 参数为 null。</exception>
        </member>
        <member name="M:Rabbit.Web.RouteExtension.CreateRoute(System.String,System.Object,System.Object,System.Object)">
            <summary>
            映射指定的 URL 路由并设置默认的路由值、约束和命名空间。
            </summary>
            <param name="url">路由的 URL 模式。</param>
            <param name="defaults">一个包含默认路由值的对象。</param>
            <param name="constraints">一组表达式，用于指定 url 参数的值。</param>
            <param name="dataTokens">传递到路由处理程序但未用于确定该路由是否匹配特定 URL 模式的自定义值。这些值会传递到路由处理程序，以便用于处理请求。</param>
            <returns>对映射路由的引用。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="url"/> 参数为 null。</exception>
        </member>
        <member name="M:Rabbit.Web.RouteExtension.CreateRoute(System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteValueDictionary)">
            <summary>
            映射指定的 URL 路由并设置默认的路由值、约束和命名空间。
            </summary>
            <param name="url">路由的 URL 模式。</param>
            <param name="defaults">一个包含默认路由值的对象。</param>
            <param name="constraints">一组表达式，用于指定 url 参数的值。。</param>
            <param name="dataTokens">传递到路由处理程序但未用于确定该路由是否匹配特定 URL 模式的自定义值。这些值会传递到路由处理程序，以便用于处理请求。</param>
            <returns>对映射路由的引用。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="url"/> 参数为 null。</exception>
        </member>
        <member name="M:Rabbit.Web.Routes.HubRoute.GetRouteData(System.Web.HttpContextBase)">
            <summary>
            当在派生类中重写时，会返回有关请求的路由信息。
            </summary>
            <returns>
            一个对象，包含路由定义的值（如果该路由与当前请求匹配）或 null（如果该路由与请求不匹配）。
            </returns>
            <param name="httpContext">一个对象，封装有关 HTTP 请求的信息。</param>
        </member>
        <member name="M:Rabbit.Web.Routes.HubRoute.GetVirtualPath(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
            <summary>
            当在派生类中重写时，会检查路由是否与指定值匹配，如果匹配，则生成一个 URL，然后检索有关该路由的信息。
            </summary>
            <returns>
            一个对象（包含生成的 URL 和有关路由的信息）或 null（如果路由与 <paramref name="values"/> 不匹配）。
            </returns>
            <param name="requestContext">一个对象，封装有关所请求的路由的信息。</param><param name="values">一个包含路由参数的对象。</param>
        </member>
        <member name="M:Rabbit.Web.Routes.HubRoute.CompareTo(Rabbit.Web.Routes.HubRoute)">
            <summary>
            比较当前对象和同一类型的另一对象。
            </summary>
            <returns>
            一个值，指示要比较的对象的相对顺序。返回值的含义如下：值含义小于零此对象小于 <paramref name="other"/> 参数。零此对象等于 <paramref name="other"/>。大于零此对象大于 <paramref name="other"/>。
            </returns>
            <param name="other">与此对象进行比较的对象。</param>
        </member>
        <member name="P:Rabbit.Web.Routes.HubRoute.Area">
            <summary>
            Gets the name of the area to associate the route with.
            </summary>
            <returns>
            The name of the area to associate the route with.
            </returns>
        </member>
        <member name="T:Rabbit.Web.Routes.IRouteProvider">
            <summary>
            一个抽象的路由提供程序。
            </summary>
        </member>
        <member name="M:Rabbit.Web.Routes.IRouteProvider.GetRoutes(System.Collections.Generic.ICollection{Rabbit.Web.Routes.RouteDescriptor})">
            <summary>
            获取路由信息。
            </summary>
            <param name="routes">路由集合。</param>
        </member>
        <member name="M:Rabbit.Web.Routes.Impl.DefaultRouteProvider.GetRoutes(System.Collections.Generic.ICollection{Rabbit.Web.Routes.RouteDescriptor})">
            <summary>
                获取路由信息。
            </summary>
            <param name="routes">路由集合。</param>
        </member>
        <member name="M:Rabbit.Web.Routes.Impl.DefaultRouteProvider.HomeOrAccount.Match(System.Web.HttpContextBase,System.Web.Routing.Route,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteDirection)">
            <summary>
                确定 URL 参数是否包含此约束的有效值。
            </summary>
            <returns>
                如果 URL 参数包含有效值，则为 true；否则为 false。
            </returns>
            <param name="httpContext">一个对象，封装有关 HTTP 请求的信息。</param>
            <param name="route">此约束所属的对象。</param>
            <param name="parameterName">正在检查的参数的名称。</param>
            <param name="values">一个包含 URL 的参数的对象。</param>
            <param name="routeDirection">一个对象，指示在处理传入请求或生成 URL 时，是否正在执行约束检查。</param>
        </member>
        <member name="T:Rabbit.Web.Routes.IRoutePublisher">
            <summary>
            一个抽象的路由发布者。
            </summary>
        </member>
        <member name="M:Rabbit.Web.Routes.IRoutePublisher.Publish(System.Collections.Generic.IEnumerable{Rabbit.Web.Routes.RouteDescriptor})">
            <summary>
            发布路由。
            </summary>
            <param name="routes">路由集合。</param>
        </member>
        <member name="M:Rabbit.Web.Routes.Impl.DefaultRoutePublisher.Publish(System.Collections.Generic.IEnumerable{Rabbit.Web.Routes.RouteDescriptor})">
            <summary>
            发布路由。
            </summary>
            <param name="routes">路由集合。</param>
        </member>
        <member name="T:Rabbit.Web.Routes.IRunningShellTable">
            <summary>
            一个抽象的正在运行中的外壳表。
            </summary>
        </member>
        <member name="M:Rabbit.Web.Routes.IRunningShellTable.Add(Rabbit.Kernel.Environment.Configuration.ShellSettings)">
            <summary>
            添加。
            </summary>
            <param name="settings">外壳设置。</param>
        </member>
        <member name="M:Rabbit.Web.Routes.IRunningShellTable.Remove(Rabbit.Kernel.Environment.Configuration.ShellSettings)">
            <summary>
            删除。
            </summary>
            <param name="settings">外壳设置。</param>
        </member>
        <member name="M:Rabbit.Web.Routes.IRunningShellTable.Update(Rabbit.Kernel.Environment.Configuration.ShellSettings)">
            <summary>
            更新。
            </summary>
            <param name="settings">外壳设置。</param>
        </member>
        <member name="M:Rabbit.Web.Routes.IRunningShellTable.Match(System.Web.HttpContextBase)">
            <summary>
            匹配。
            </summary>
            <param name="httpContext">Http上下文。</param>
            <returns>外壳设置。</returns>
        </member>
        <member name="M:Rabbit.Web.Routes.IRunningShellTable.Match(System.String,System.String)">
            <summary>
            匹配。
            </summary>
            <param name="host">主机名称。</param>
            <param name="appRelativeCurrentExecutionFilePath">应用程序相对当前执行文件路径。</param>
            <returns>外壳设置，</returns>
        </member>
        <member name="M:Rabbit.Web.Routes.Impl.DefaultRunningShellTable.Add(Rabbit.Kernel.Environment.Configuration.ShellSettings)">
            <summary>
            添加。
            </summary>
            <param name="settings">外壳设置。</param>
        </member>
        <member name="M:Rabbit.Web.Routes.Impl.DefaultRunningShellTable.Remove(Rabbit.Kernel.Environment.Configuration.ShellSettings)">
            <summary>
            删除。
            </summary>
            <param name="settings">外壳设置。</param>
        </member>
        <member name="M:Rabbit.Web.Routes.Impl.DefaultRunningShellTable.Update(Rabbit.Kernel.Environment.Configuration.ShellSettings)">
            <summary>
            更新。
            </summary>
            <param name="settings">外壳设置。</param>
        </member>
        <member name="M:Rabbit.Web.Routes.Impl.DefaultRunningShellTable.Match(System.Web.HttpContextBase)">
            <summary>
            匹配。
            </summary>
            <param name="httpContext">Http上下文。</param>
            <returns>外壳设置。</returns>
        </member>
        <member name="M:Rabbit.Web.Routes.Impl.DefaultRunningShellTable.Match(System.String,System.String)">
            <summary>
            匹配。
            </summary>
            <param name="host">主机名称。</param>
            <param name="appRelativeCurrentExecutionFilePath">应用程序相对当前执行文件路径。</param>
            <returns>外壳设置，</returns>
        </member>
        <member name="M:Rabbit.Web.Routes.Impl.DefaultRunningShellTable.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="T:Rabbit.Web.Routes.IRoutePublisherEventHandler">
            <summary>
            一个抽象的录音发布者事件处理程序。
            </summary>
        </member>
        <member name="M:Rabbit.Web.Routes.IRoutePublisherEventHandler.Publishing(System.Collections.Generic.IEnumerable{Rabbit.Web.Routes.RouteDescriptor})">
            <summary>
            发布前。
            </summary>
            <param name="routeDescriptors">路由描述符。</param>
        </member>
        <member name="M:Rabbit.Web.Routes.IRoutePublisherEventHandler.Published(System.Collections.Generic.IEnumerable{Rabbit.Web.Routes.RouteDescriptor})">
            <summary>
            发布后。
            </summary>
            <param name="routeDescriptors">路由描述符。</param>
        </member>
        <member name="T:Rabbit.Web.Routes.RouteDescriptor">
            <summary>
            路由描述符。
            </summary>
        </member>
        <member name="P:Rabbit.Web.Routes.RouteDescriptor.Name">
            <summary>
            路由名称。
            </summary>
        </member>
        <member name="P:Rabbit.Web.Routes.RouteDescriptor.Priority">
            <summary>
            优先级。
            </summary>
        </member>
        <member name="P:Rabbit.Web.Routes.RouteDescriptor.Route">
            <summary>
            路由项。
            </summary>
        </member>
        <member name="P:Rabbit.Web.Routes.RouteDescriptor.SessionState">
            <summary>
            会话状态。
            </summary>
        </member>
        <member name="T:Rabbit.Web.Routes.HttpRouteDescriptor">
            <summary>
            WebApi路由描述符。
            </summary>
        </member>
        <member name="P:Rabbit.Web.Routes.HttpRouteDescriptor.RouteTemplate">
            <summary>
            路由模板。
            </summary>
        </member>
        <member name="P:Rabbit.Web.Routes.HttpRouteDescriptor.Defaults">
            <summary>
            默认值。
            </summary>
        </member>
        <member name="P:Rabbit.Web.Routes.HttpRouteDescriptor.Constraints">
            <summary>
            约束。
            </summary>
        </member>
        <member name="M:Rabbit.Web.Routes.ShellRoute.GetRouteData(System.Web.HttpContextBase)">
            <summary>
            当在派生类中重写时，会返回有关请求的路由信息。
            </summary>
            <returns>
            一个对象，包含路由定义的值（如果该路由与当前请求匹配）或 null（如果该路由与请求不匹配）。
            </returns>
            <param name="httpContext">一个对象，封装有关 HTTP 请求的信息。</param>
        </member>
        <member name="M:Rabbit.Web.Routes.ShellRoute.GetVirtualPath(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
            <summary>
            当在派生类中重写时，会检查路由是否与指定值匹配，如果匹配，则生成一个 URL，然后检索有关该路由的信息。
            </summary>
            <returns>
            一个对象（包含生成的 URL 和有关路由的信息）或 null（如果路由与 <paramref name="values"/> 不匹配）。
            </returns>
            <param name="requestContext">一个对象，封装有关所请求的路由的信息。</param><param name="values">一个包含路由参数的对象。</param>
        </member>
        <member name="P:Rabbit.Web.Routes.ShellRoute.Area">
            <summary>
            Gets the name of the area to associate the route with.
            </summary>
            <returns>
            The name of the area to associate the route with.
            </returns>
        </member>
        <member name="T:Rabbit.Web.ServiceRouteExtension">
            <summary>
            服务路由扩展方法。
            </summary>
        </member>
        <member name="M:Rabbit.Web.ServiceRouteExtension.MapRabbitServiceRoute``1(System.Collections.Generic.ICollection{Rabbit.Web.Routes.RouteDescriptor},System.String)">
            <summary>
            映射一个Rabbit服务路由。
            </summary>
            <typeparam name="TService">服务类型。</typeparam>
            <param name="routes">应用程序的路由的集合。</param>
            <param name="routePrefix">路由前缀。</param>
            <returns>对映射路由的引用。</returns>
        </member>
        <member name="M:Rabbit.Web.ServiceRouteExtension.MapRabbitServiceRoute``1(System.Collections.Generic.ICollection{Rabbit.Web.Routes.RouteDescriptor},System.String,System.String)">
            <summary>
            映射一个Rabbit服务路由。
            </summary>
            <typeparam name="TService">服务类型。</typeparam>
            <param name="routes">应用程序的路由的集合。</param>
            <param name="name">要映射的路由的名称。</param>
            <param name="routePrefix">路由前缀。</param>
            <returns>对映射路由的引用。</returns>
        </member>
        <member name="M:Rabbit.Web.ServiceRouteExtension.MapRabbitServiceRoute``1(System.Collections.Generic.ICollection{Rabbit.Web.Routes.RouteDescriptor},System.String,System.Int32,System.String)">
            <summary>
            映射一个Rabbit服务路由。
            </summary>
            <typeparam name="TService">服务类型。</typeparam>
            <param name="routes">应用程序的路由的集合。</param>
            <param name="name">要映射的路由的名称。</param>
            <param name="priority">优先级。</param>
            <param name="routePrefix">路由前缀。</param>
            <returns>对映射路由的引用。</returns>
        </member>
        <member name="M:Rabbit.Web.ServiceRouteExtension.MapRabbitServiceRoute(System.Collections.Generic.ICollection{Rabbit.Web.Routes.RouteDescriptor},System.String,System.Type)">
            <summary>
            映射一个Rabbit服务路由。
            </summary>
            <param name="routes">应用程序的路由的集合。</param>
            <param name="routePrefix">路由前缀。</param>
            <param name="serviceType">服务类型。</param>
            <returns>对映射路由的引用。</returns>
        </member>
        <member name="M:Rabbit.Web.ServiceRouteExtension.MapRabbitServiceRoute(System.Collections.Generic.ICollection{Rabbit.Web.Routes.RouteDescriptor},System.String,System.String,System.Type)">
            <summary>
            映射一个Rabbit服务路由。
            </summary>
            <param name="routes">应用程序的路由的集合。</param>
            <param name="name">要映射的路由的名称。</param>
            <param name="routePrefix">路由前缀。</param>
            <param name="serviceType">服务类型。</param>
            <returns>对映射路由的引用。</returns>
        </member>
        <member name="M:Rabbit.Web.ServiceRouteExtension.MapRabbitServiceRoute(System.Collections.Generic.ICollection{Rabbit.Web.Routes.RouteDescriptor},System.String,System.Int32,System.String,System.Type)">
            <summary>
            映射一个Rabbit服务路由。
            </summary>
            <param name="routes">应用程序的路由的集合。</param>
            <param name="name">要映射的路由的名称。</param>
            <param name="priority">优先级。</param>
            <param name="routePrefix">路由前缀。</param>
            <param name="serviceType">服务类型。</param>
            <returns>对映射路由的引用。</returns>
        </member>
        <member name="M:Rabbit.Web.ShellEvents.Activated">
            <summary>
            激活外壳完成后执行。
            </summary>
        </member>
        <member name="M:Rabbit.Web.ShellEvents.Terminating">
            <summary>
            终止外壳前候执行。
            </summary>
        </member>
        <member name="M:Rabbit.Web.Themes.Impl.CurrentThemeWorkContext.Get``1(System.String)">
            <summary>
            创建一个从一个工作上下文获取服务的委托。
            </summary>
            <typeparam name="T">服务类型。</typeparam>
            <param name="name">服务名称。</param>
            <returns>从一个工作上下文获取服务的委托。</returns>
        </member>
        <member name="T:Rabbit.Web.Themes.IThemeManager">
            <summary>
            一个抽象的主题管理者。
            </summary>
        </member>
        <member name="M:Rabbit.Web.Themes.IThemeManager.GetRequestTheme(System.Web.Routing.RequestContext)">
            <summary>
            获取当前请求的主题。
            </summary>
            <param name="requestContext">请求上下文。</param>
            <returns>主题。</returns>
        </member>
        <member name="M:Rabbit.Web.Themes.Impl.DefaultThemeManager.GetRequestTheme(System.Web.Routing.RequestContext)">
            <summary>
            获取当前请求的主题。
            </summary>
            <param name="requestContext">请求上下文。</param>
            <returns>主题。</returns>
        </member>
        <member name="T:Rabbit.Web.Themes.IThemeSelector">
            <summary>
            一个抽象的主题选择器。
            </summary>
        </member>
        <member name="M:Rabbit.Web.Themes.IThemeSelector.GetTheme(System.Web.Routing.RequestContext)">
            <summary>
            根据当前请求获取主题。
            </summary>
            <param name="context">请求上下文。</param>
            <returns>主题选择结果。</returns>
        </member>
        <member name="M:Rabbit.Web.Themes.Impl.SafeModeThemeSelector.GetTheme(System.Web.Routing.RequestContext)">
            <summary>
            根据当前请求获取主题。
            </summary>
            <param name="context">请求上下文。</param>
            <returns>主题选择结果。</returns>
        </member>
        <member name="M:Rabbit.Web.Themes.Impl.TenantThemeSelector.GetTheme(System.Web.Routing.RequestContext)">
            <summary>
            根据当前请求获取主题。
            </summary>
            <param name="context">请求上下文。</param>
            <returns>主题选择结果。</returns>
        </member>
        <member name="T:Rabbit.Web.Themes.ThemeSelectorResult">
            <summary>
            主题选择结果。
            </summary>
        </member>
        <member name="P:Rabbit.Web.Themes.ThemeSelectorResult.Priority">
            <summary>
            优先级。
            </summary>
        </member>
        <member name="P:Rabbit.Web.Themes.ThemeSelectorResult.ThemeName">
            <summary>
            主题名称。
            </summary>
        </member>
        <member name="T:Rabbit.Web.UI.Navigation.INavigationManager">
            <summary>
            一个抽象的导航管理者。
            </summary>
        </member>
        <member name="M:Rabbit.Web.UI.Navigation.INavigationManager.BuildMenu(System.String)">
            <summary>
            生成菜单。
            </summary>
            <param name="menuName">菜单名称。</param>
            <returns>菜单项集合。</returns>
        </member>
        <member name="M:Rabbit.Web.UI.Navigation.INavigationManager.BuildImageSets(System.String)">
            <summary>
            生成图片集。
            </summary>
            <param name="menuName">菜单名称。</param>
            <returns>图片集。</returns>
        </member>
        <member name="T:Rabbit.Web.UI.Navigation.INavigationProvider">
            <summary>
            一个抽象的导航提供者。
            </summary>
        </member>
        <member name="M:Rabbit.Web.UI.Navigation.INavigationProvider.GetNavigation(Rabbit.Web.UI.Navigation.NavigationBuilder)">
            <summary>
            获取导航。
            </summary>
            <param name="builder">导航建造者。</param>
        </member>
        <member name="P:Rabbit.Web.UI.Navigation.INavigationProvider.MenuName">
            <summary>
            导航菜单名称。
            </summary>
        </member>
        <member name="T:Rabbit.Web.UI.Navigation.MenuItem">
            <summary>
            菜单项。
            </summary>
        </member>
        <member name="M:Rabbit.Web.UI.Navigation.MenuItem.GetAttribute``1(System.String)">
            <summary>
            获取一个属性。
            </summary>
            <typeparam name="T">属性类型。</typeparam>
            <param name="name">属性名称。</param>
            <returns>属性值。</returns>
        </member>
        <member name="M:Rabbit.Web.UI.Navigation.MenuItem.SetAttribute(System.String,System.Object)">
            <summary>
            设置一个属性。
            </summary>
            <param name="name">属性名称。</param>
            <param name="value">属性值。</param>
        </member>
        <member name="P:Rabbit.Web.UI.Navigation.MenuItem.Text">
            <summary>
            导航文本。
            </summary>
        </member>
        <member name="P:Rabbit.Web.UI.Navigation.MenuItem.Url">
            <summary>
            Url地址。
            </summary>
        </member>
        <member name="P:Rabbit.Web.UI.Navigation.MenuItem.Href">
            <summary>
            菜单链接地址。
            </summary>
        </member>
        <member name="P:Rabbit.Web.UI.Navigation.MenuItem.Position">
            <summary>
            导航位置。
            </summary>
        </member>
        <member name="P:Rabbit.Web.UI.Navigation.MenuItem.LocalNavigation">
            <summary>
            是否是本地导航。
            </summary>
        </member>
        <member name="P:Rabbit.Web.UI.Navigation.MenuItem.Selected">
            <summary>
            是否选中。
            </summary>
        </member>
        <member name="P:Rabbit.Web.UI.Navigation.MenuItem.RouteValues">
            <summary>
            路由值。
            </summary>
        </member>
        <member name="P:Rabbit.Web.UI.Navigation.MenuItem.Items">
            <summary>
            菜单子项。
            </summary>
        </member>
        <member name="P:Rabbit.Web.UI.Navigation.MenuItem.Classes">
            <summary>
            样式名。
            </summary>
        </member>
        <member name="P:Rabbit.Web.UI.Navigation.MenuItem.Icon">
            <summary>
            图标。
            </summary>
        </member>
        <member name="P:Rabbit.Web.UI.Navigation.MenuItem.Attributes">
            <summary>
            扩展属性。
            </summary>
        </member>
        <member name="T:Rabbit.Web.UI.Navigation.NavigationBuilder">
            <summary>
            导航建造者。
            </summary>
        </member>
        <member name="M:Rabbit.Web.UI.Navigation.NavigationBuilder.#ctor">
            <summary>
            初始化一个新的导航建造者。
            </summary>
        </member>
        <member name="M:Rabbit.Web.UI.Navigation.NavigationBuilder.Add(Rabbit.Kernel.Localization.LocalizedString,System.Action{Rabbit.Web.UI.Navigation.NavigationItemBuilder},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            添加一个导航。
            </summary>
            <param name="caption">标题。</param>
            <param name="itemBuilder">导航项建造者。</param>
            <param name="classes">样式名称。</param>
            <returns>导航建造者。</returns>
        </member>
        <member name="M:Rabbit.Web.UI.Navigation.NavigationBuilder.Add(System.Action{Rabbit.Web.UI.Navigation.NavigationItemBuilder},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            添加一个导航。
            </summary>
            <param name="itemBuilder">导航项建造者。</param>
            <param name="classes">样式名称。</param>
            <returns>导航建造者。</returns>
        </member>
        <member name="M:Rabbit.Web.UI.Navigation.NavigationBuilder.Add(Rabbit.Kernel.Localization.LocalizedString,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            添加一个导航。
            </summary>
            <param name="caption">标题。</param>
            <param name="classes">样式名称。</param>
            <returns>导航建造者。</returns>
        </member>
        <member name="M:Rabbit.Web.UI.Navigation.NavigationBuilder.Add(Rabbit.Kernel.Localization.LocalizedString,System.String,System.Action{Rabbit.Web.UI.Navigation.NavigationItemBuilder},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            添加一个导航。
            </summary>
            <param name="caption">标题。</param>
            <param name="position">导航位置。</param>
            <param name="itemBuilder">导航项建造者。</param>
            <param name="classes">样式名称。</param>
            <returns>导航建造者。</returns>
        </member>
        <member name="M:Rabbit.Web.UI.Navigation.NavigationBuilder.Remove(Rabbit.Web.UI.Navigation.MenuItem)">
            <summary>
            删除一个导航。
            </summary>
            <param name="item">导航项。</param>
            <returns>导航建造者。</returns>
        </member>
        <member name="M:Rabbit.Web.UI.Navigation.NavigationBuilder.AddImageSet(System.String)">
            <summary>
            添加图片集。
            </summary>
            <param name="imageSet">图片集。</param>
            <returns>导航建造者。</returns>
        </member>
        <member name="M:Rabbit.Web.UI.Navigation.NavigationBuilder.Build">
            <summary>
            生成导航。
            </summary>
            <returns>导航集合。</returns>
        </member>
        <member name="M:Rabbit.Web.UI.Navigation.NavigationBuilder.BuildImageSets">
            <summary>
            生成图片集。
            </summary>
            <returns>图片集。</returns>
        </member>
        <member name="T:Rabbit.Web.UI.Navigation.NavigationItemBuilder">
            <summary>
            导航项建造者。
            </summary>
        </member>
        <member name="M:Rabbit.Web.UI.Navigation.NavigationItemBuilder.Caption(Rabbit.Kernel.Localization.LocalizedString)">
            <summary>
            设置导航标题。
            </summary>
            <param name="caption">导航标题。</param>
            <returns>导航项建造者。</returns>
        </member>
        <member name="M:Rabbit.Web.UI.Navigation.NavigationItemBuilder.Position(System.String)">
            <summary>
            设置导航的位置。
            </summary>
            <param name="position">位置。</param>
            <returns>导航项建造者。</returns>
        </member>
        <member name="M:Rabbit.Web.UI.Navigation.NavigationItemBuilder.Url(System.String)">
            <summary>
            设置导航的Url地址。
            </summary>
            <param name="url">url地址。</param>
            <returns>导航项建造者。</returns>
        </member>
        <member name="M:Rabbit.Web.UI.Navigation.NavigationItemBuilder.AddClass(System.String)">
            <summary>
            添加导航样式。
            </summary>
            <param name="className">类名称。</param>
            <returns>导航项建造者。</returns>
        </member>
        <member name="M:Rabbit.Web.UI.Navigation.NavigationItemBuilder.RemoveClass(System.String)">
            <summary>
            删除导航样式。
            </summary>
            <param name="className">类名称。</param>
            <returns>导航项建造者。</returns>
        </member>
        <member name="M:Rabbit.Web.UI.Navigation.NavigationItemBuilder.LocalNavigation(System.Boolean)">
            <summary>
            设置导航是否是本地导航。
            </summary>
            <param name="value">true为是本地导航，false不是本地导航。</param>
            <returns>导航项建造者。</returns>
        </member>
        <member name="M:Rabbit.Web.UI.Navigation.NavigationItemBuilder.Icon(System.String)">
            <summary>
            设置导航Icon。
            </summary>
            <param name="icon">icon。</param>
            <returns>导航项建造者。</returns>
        </member>
        <member name="M:Rabbit.Web.UI.Navigation.NavigationItemBuilder.Build">
            <summary>
            生成导航。
            </summary>
            <returns>导航集合。</returns>
        </member>
        <member name="M:Rabbit.Web.UI.Navigation.NavigationItemBuilder.Action(System.Web.Routing.RouteValueDictionary)">
            <summary>
            设置导航Action。
            </summary>
            <param name="values">路由值。</param>
            <returns>导航项建造者。</returns>
        </member>
        <member name="M:Rabbit.Web.UI.Navigation.NavigationItemBuilder.Action(System.String)">
            <summary>
            设置导航Action。
            </summary>
            <param name="actionName">Action名称。</param>
            <returns>导航项建造者。</returns>
        </member>
        <member name="M:Rabbit.Web.UI.Navigation.NavigationItemBuilder.Action(System.String,System.String)">
            <summary>
            设置导航Action。
            </summary>
            <param name="actionName">Action名称。</param>
            <param name="controllerName">控制器名称。</param>
            <returns>导航项建造者。</returns>
        </member>
        <member name="M:Rabbit.Web.UI.Navigation.NavigationItemBuilder.Action(System.String,System.String,System.Object)">
            <summary>
            设置导航Action。
            </summary>
            <param name="actionName">Action名称。</param>
            <param name="controllerName">控制器名称。</param>
            <param name="values">其他值。</param>
            <returns>导航项建造者。</returns>
        </member>
        <member name="M:Rabbit.Web.UI.Navigation.NavigationItemBuilder.Action(System.String,System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            设置导航Action。
            </summary>
            <param name="actionName">Action名称。</param>
            <param name="controllerName">控制器名称。</param>
            <param name="values">其他值。</param>
            <returns>导航项建造者。</returns>
        </member>
        <member name="P:Rabbit.Web.UI.Navigation.NavigationItemBuilder.MenuItem">
            <summary>
            菜单项。
            </summary>
        </member>
        <member name="T:Rabbit.Web.Utility.Extensions.ExtensionDescriptorExtensions">
            <summary>
            扩展描述符扩展方法。
            </summary>
        </member>
        <member name="M:Rabbit.Web.Utility.Extensions.ExtensionDescriptorExtensions.GetBaseTheme(Rabbit.Kernel.Extensions.Models.ExtensionDescriptor)">
            <summary>
            获取基本主题。
            </summary>
            <param name="descriptor">扩展描述符。</param>
            <returns>基本主题。</returns>
        </member>
        <member name="M:Rabbit.Web.Wcf.RabbitDependencyInjectionServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
            <summary>
            用于检查服务宿主和服务说明，从而确定服务是否可成功运行。
            </summary>
            <param name="serviceDescription">服务说明。</param><param name="serviceHostBase">当前正在构建的服务宿主。</param>
        </member>
        <member name="M:Rabbit.Web.Wcf.RabbitDependencyInjectionServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            用于向绑定元素传递自定义数据，以支持协定实现。
            </summary>
            <param name="serviceDescription">服务的服务说明。</param><param name="serviceHostBase">服务的宿主。</param><param name="endpoints">服务终结点。</param><param name="bindingParameters">绑定元素可访问的自定义对象。</param>
        </member>
        <member name="M:Rabbit.Web.Wcf.RabbitDependencyInjectionServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
            <summary>
            用于更改运行时属性值或插入自定义扩展对象（例如错误处理程序、消息或参数拦截器、安全扩展以及其他自定义扩展对象）。
            </summary>
            <param name="serviceDescription">服务说明。</param><param name="serviceHostBase">当前正在生成的宿主。</param>
        </member>
        <member name="M:Rabbit.Web.Wcf.RabbitInstanceContext.Attach(System.ServiceModel.InstanceContext)">
            <summary>
            使扩展对象可以查找它聚合的时间。当扩展添加到 <see cref="P:System.ServiceModel.IExtensibleObject`1.Extensions"/> 属性中时调用。
            </summary>
            <param name="owner">聚合此扩展的可扩展对象。</param>
        </member>
        <member name="M:Rabbit.Web.Wcf.RabbitInstanceContext.Detach(System.ServiceModel.InstanceContext)">
            <summary>
            使对象可以查找它不再聚合的时间。当从 <see cref="P:System.ServiceModel.IExtensibleObject`1.Extensions"/> 属性中移除扩展时调用。
            </summary>
            <param name="owner">聚合此扩展的可扩展对象。</param>
        </member>
        <member name="M:Rabbit.Web.Wcf.RabbitInstanceContext.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:Rabbit.Web.Wcf.RabbitInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)">
            <summary>
            如果给出指定的 <see cref="T:System.ServiceModel.InstanceContext"/> 对象，则返回服务对象。
            </summary>
            <returns>
            用户定义的服务对象。
            </returns>
            <param name="instanceContext">当前的 <see cref="T:System.ServiceModel.InstanceContext"/> 对象。</param>
        </member>
        <member name="M:Rabbit.Web.Wcf.RabbitInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
            <summary>
            如果给出指定的 <see cref="T:System.ServiceModel.InstanceContext"/> 对象，则返回服务对象。
            </summary>
            <returns>
            服务对象。
            </returns>
            <param name="instanceContext">当前的 <see cref="T:System.ServiceModel.InstanceContext"/> 对象。</param><param name="message">触发服务对象的创建的消息。</param>
        </member>
        <member name="M:Rabbit.Web.Wcf.RabbitInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)">
            <summary>
            在 <see cref="T:System.ServiceModel.InstanceContext"/> 对象回收服务对象时调用。
            </summary>
            <param name="instanceContext">服务的实例上下文。</param><param name="instance">要回收的服务对象。</param>
        </member>
        <member name="T:Rabbit.Web.Wcf.RabbitServiceHostFactory">
            <summary>
            Rabbit服务主机工厂。
            </summary>
        </member>
        <member name="M:Rabbit.Web.Wcf.RabbitServiceHostFactory.#ctor">
            <summary>
            初始化一个新的Rabbit服务主机工厂。
            </summary>
        </member>
        <member name="M:Rabbit.Web.Wcf.RabbitServiceHostFactory.CreateServiceHost(System.String,System.Uri[])">
            <summary>
            创建具有特定基址的 <see cref="T:System.ServiceModel.ServiceHost"/>，并使用指定数据对其进行初始化。
            </summary>
            <returns>
            具有特定基址的 <see cref="T:System.ServiceModel.ServiceHost"/>。
            </returns>
            <param name="constructorString">传递给 <see cref="T:System.ServiceModel.ServiceHostBase"/> 实例的由该工厂构建的初始化数据。</param><param name="baseAddresses">类型为 <see cref="T:System.Uri"/> 且包含所承载服务的基址的 <see cref="T:System.Array"/>。</param><exception cref="T:System.ArgumentNullException"><paramref name="baseAddresses"/> 为 null。</exception><exception cref="T:System.InvalidOperationException">未提供宿主上下文，或者 <paramref name="constructorString"/> 为 null 或为空。</exception>
        </member>
        <member name="M:Rabbit.Web.Wcf.RabbitServiceHostFactory.GetLifetimeScope(System.String,System.Uri[])">
            <summary>
            获Ioc域容器。
            </summary>
            <param name="constructorString">构造字符串。</param>
            <param name="baseAddresses">基地址。</param>
            <returns>Ioc容器。</returns>
        </member>
        <member name="P:Rabbit.Web.Wcf.RabbitServiceHostFactory.HostContainer">
            <summary>
            主机容器。
            </summary>
        </member>
        <member name="M:Rabbit.Web.WebModule.Load(Autofac.ContainerBuilder)">
            <summary>
            Override to add registrations to the container.
            </summary>
            <remarks>
            Note that the ContainerBuilder parameter is unique to this module.
            </remarks>
            <param name="builder">The builder through which components can be
                        registered.</param>
        </member>
        <member name="T:Rabbit.Web.Utility.Extensions.WorkContextExtensions">
            <summary>
            工作上下文扩展方法。
            </summary>
        </member>
        <member name="M:Rabbit.Web.Utility.Extensions.WorkContextExtensions.GetCurrentTheme(Rabbit.Kernel.Works.WorkContext)">
            <summary>
            获取当前主题。
            </summary>
            <param name="workContext">工作上下文。</param>
            <returns>主题扩展描述符条目。</returns>
        </member>
        <member name="T:Rabbit.Web.Works.IWebWorkContextAccessor">
            <summary>
            一个抽象的Web上下文访问者。
            </summary>
        </member>
        <member name="M:Rabbit.Web.Works.IWebWorkContextAccessor.GetContext(System.Web.HttpContextBase)">
            <summary>
            获取工作上下文。
            </summary>
            <param name="httpContext">Http上下文。</param>
            <returns>工作上下文。</returns>
        </member>
        <member name="M:Rabbit.Web.Works.IWebWorkContextAccessor.CreateWorkContextScope(System.Web.HttpContextBase)">
            <summary>
            创建工作上下文范围。
            </summary>
            <param name="httpContext">Http上下文。</param>
            <returns>工作上下文范围。</returns>
        </member>
        <member name="M:Rabbit.Web.Works.Impl.WebWorkContextAccessor.GetContext">
            <summary>
            获取工作上下文。
            </summary>
            <returns>工作上下文。</returns>
        </member>
        <member name="M:Rabbit.Web.Works.Impl.WebWorkContextAccessor.CreateWorkContextScope">
            <summary>
            创建一个工作上下文范围。
            </summary>
            <returns>工作上下文范围。</returns>
        </member>
        <member name="M:Rabbit.Web.Works.Impl.WebWorkContextAccessor.GetContext(System.Web.HttpContextBase)">
            <summary>
            获取工作上下文。
            </summary>
            <param name="httpContext">Http上下文。</param>
            <returns>工作上下文。</returns>
        </member>
        <member name="M:Rabbit.Web.Works.Impl.WebWorkContextAccessor.CreateWorkContextScope(System.Web.HttpContextBase)">
            <summary>
            创建工作上下文范围。
            </summary>
            <param name="httpContext">Http上下文。</param>
            <returns>工作上下文范围。</returns>
        </member>
        <member name="M:Rabbit.Web.Works.Impl.WebWorkContextAccessor.ThreadStaticScopeImplementation.Resolve``1">
            <summary>
            解析一个服务。
            </summary>
            <typeparam name="TService">服务类型。</typeparam>
            <returns>服务实例。</returns>
        </member>
        <member name="M:Rabbit.Web.Works.Impl.WebWorkContextAccessor.ThreadStaticScopeImplementation.TryResolve``1(``0@)">
            <summary>
            尝试解析一个服务。
            </summary>
            <typeparam name="TService">服务类型。</typeparam>
            <param name="service">服务实例。</param>
            <returns>如果解析成功则返回true，否则返回false。</returns>
        </member>
        <member name="M:Rabbit.Web.Works.Impl.WebWorkContextAccessor.ThreadStaticScopeImplementation.System#IDisposable#Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="P:Rabbit.Web.Works.Impl.WebWorkContextAccessor.ThreadStaticScopeImplementation.WorkContext">
            <summary>
            工作上下文。
            </summary>
        </member>
        <member name="T:Rabbit.Web.Works.WebWorkContext">
            <summary>
            Web工作上下文。
            </summary>
        </member>
        <member name="M:Rabbit.Web.Works.WebWorkContext.#ctor(Rabbit.Kernel.Works.WorkContext)">
            <summary>
            初始化一个新的Web工作上下文。
            </summary>
            <param name="workContext">工作上下文。</param>
        </member>
        <member name="M:Rabbit.Web.Works.WebWorkContext.Resolve``1">
            <summary>
            解析一个服务。
            </summary>
            <typeparam name="T">服务类型。</typeparam>
            <returns>服务实例。</returns>
        </member>
        <member name="M:Rabbit.Web.Works.WebWorkContext.TryResolve``1(``0@)">
            <summary>
            尝试解析一个服务。
            </summary>
            <typeparam name="T">服务类型。</typeparam>
            <param name="service">服务实例。</param>
            <returns>如果解析成功则返回true，否则返回false。</returns>
        </member>
        <member name="M:Rabbit.Web.Works.WebWorkContext.GetState``1(System.String)">
            <summary>
            获取一个状态。
            </summary>
            <typeparam name="T">状态类型。</typeparam>
            <param name="name">状态名称。</param>
            <returns>状态实例。</returns>
        </member>
        <member name="M:Rabbit.Web.Works.WebWorkContext.SetState``1(System.String,``0)">
            <summary>
            设置一个状态。
            </summary>
            <typeparam name="T">状态类型。</typeparam>
            <param name="name">状态名称。</param>
            <param name="value">状态值。</param>
        </member>
        <member name="P:Rabbit.Web.Works.WebWorkContext.HttpContext">
            <summary>
            HTTP上下文对应的工作环境。
            </summary>
        </member>
        <member name="P:Rabbit.Web.Works.WebWorkContext.CurrentTheme">
            <summary>
            当前上下文正在使用的主题。
            </summary>
        </member>
        <member name="M:Rabbit.Web.Works.WebWorkContextModule.Load(Autofac.ContainerBuilder)">
            <summary>
            Override to add registrations to the container.
            </summary>
            <remarks>
            Note that the ContainerBuilder parameter is unique to this module.
            </remarks>
            <param name="builder">The builder through which components can be
                        registered.</param>
        </member>
        <member name="T:Rabbit.Web.Works.WorkContextExtensions">
            <summary>
            工作上下文扩展方法。
            </summary>
        </member>
        <member name="M:Rabbit.Web.Works.WorkContextExtensions.AsWebWorkContext(Rabbit.Kernel.Works.WorkContext)">
            <summary>
            将工作上下文转换为Web工作上下文。
            </summary>
            <param name="workContext">工作上下文。</param>
            <returns>Web工作上下文。</returns>
        </member>
        <member name="M:Rabbit.Web.Works.WorkContextExtensions.GetWorkContext(System.Web.Routing.RequestContext)">
            <summary>
            获取工作上下文。
            </summary>
            <param name="requestContext">请求上下文。</param>
            <returns>工作上下文。</returns>
        </member>
    </members>
</doc>
